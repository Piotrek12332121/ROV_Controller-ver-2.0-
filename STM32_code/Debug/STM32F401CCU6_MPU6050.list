
STM32F401CCU6_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008728  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080088c8  080088c8  000188c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08008a70  08008a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08008a80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000100  08008b80  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008b80  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f0b  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e87  00000000  00000000  0003503b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00037ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00039098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dba  00000000  00000000  0003a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017688  00000000  00000000  00053ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d941  00000000  00000000  0006b56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108eab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  00108efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088b0 	.word	0x080088b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080088b0 	.word	0x080088b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <QMC_init>:
#include"QMC5883.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af04      	add	r7, sp, #16
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2211      	movs	r2, #17
 8000f64:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2bc8      	cmp	r3, #200	; 0xc8
 8000f74:	d107      	bne.n	8000f86 <QMC_init+0x3a>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	791b      	ldrb	r3, [r3, #4]
 8000f7a:	f043 030c 	orr.w	r3, r3, #12
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	711a      	strb	r2, [r3, #4]
 8000f84:	e024      	b.n	8000fd0 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b64      	cmp	r3, #100	; 0x64
 8000f8a:	d107      	bne.n	8000f9c <QMC_init+0x50>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	791b      	ldrb	r3, [r3, #4]
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	711a      	strb	r2, [r3, #4]
 8000f9a:	e019      	b.n	8000fd0 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b32      	cmp	r3, #50	; 0x32
 8000fa0:	d107      	bne.n	8000fb2 <QMC_init+0x66>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	711a      	strb	r2, [r3, #4]
 8000fb0:	e00e      	b.n	8000fd0 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b0a      	cmp	r3, #10
 8000fb6:	d104      	bne.n	8000fc2 <QMC_init+0x76>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	791a      	ldrb	r2, [r3, #4]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	711a      	strb	r2, [r3, #4]
 8000fc0:	e006      	b.n	8000fd0 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	f043 030c 	orr.w	r3, r3, #12
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	220b      	movs	r2, #11
 8000fe6:	211a      	movs	r1, #26
 8000fe8:	f002 ffce 	bl	8003f88 <HAL_I2C_Mem_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <QMC_init+0xaa>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e014      	b.n	8001020 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	3301      	adds	r3, #1
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	2209      	movs	r2, #9
 800100e:	211a      	movs	r1, #26
 8001010:	f002 ffba 	bl	8003f88 <HAL_I2C_Mem_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <QMC_init+0xd2>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <QMC_init+0xd4>

	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, 100);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3305      	adds	r3, #5
 800103e:	2264      	movs	r2, #100	; 0x64
 8001040:	9202      	str	r2, [sp, #8]
 8001042:	2201      	movs	r2, #1
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2206      	movs	r2, #6
 800104c:	211a      	movs	r1, #26
 800104e:	f003 f895 	bl	800417c <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d076      	beq.n	800114c <QMC_read+0x124>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, 100);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3305      	adds	r3, #5
 8001066:	2264      	movs	r2, #100	; 0x64
 8001068:	9202      	str	r2, [sp, #8]
 800106a:	2206      	movs	r2, #6
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	2200      	movs	r2, #0
 8001074:	211a      	movs	r1, #26
 8001076:	f003 f881 	bl	800417c <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[1]<<8) | qmc->datas[0];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	799b      	ldrb	r3, [r3, #6]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	795b      	ldrb	r3, [r3, #5]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	819a      	strh	r2, [r3, #12]
		  qmc->Yaxis= (qmc->datas[3]<<8) | qmc->datas[2];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7a1b      	ldrb	r3, [r3, #8]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	79db      	ldrb	r3, [r3, #7]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	81da      	strh	r2, [r3, #14]
		  qmc->Zaxis= (qmc->datas[5]<<8) | qmc->datas[4];
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7a9b      	ldrb	r3, [r3, #10]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7a5b      	ldrb	r3, [r3, #9]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	821a      	strh	r2, [r3, #16]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010d0:	ee07 3a10 	vmov	s14, r3
 80010d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010d8:	eef0 0a47 	vmov.f32	s1, s14
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	f007 f8e9 	bl	80082b6 <atan2f>
 80010e4:	ee10 3a10 	vmov	r3, s0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa2d 	bl	8000548 <__aeabi_f2d>
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <QMC_read+0x140>)
 80010f4:	f7ff fa80 	bl	80005f8 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	a317      	add	r3, pc, #92	; (adr r3, 8001160 <QMC_read+0x138>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fba1 	bl	800084c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd49 	bl	8000ba8 <__aeabi_d2f>
 8001116:	4602      	mov	r2, r0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]

		  if(qmc->compas>0)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dd04      	ble.n	8001136 <QMC_read+0x10e>
		  {
			  qmc->heading= qmc->compas;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	e00c      	b.n	8001150 <QMC_read+0x128>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	edd3 7a06 	vldr	s15, [r3, #24]
 800113c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800116c <QMC_read+0x144>
 8001140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edc3 7a05 	vstr	s15, [r3, #20]
 800114a:	e001      	b.n	8001150 <QMC_read+0x128>
		  }
	  }
	  else
	  {
		  return 1;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <QMC_read+0x12a>
	  }
return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	54442d18 	.word	0x54442d18
 8001164:	400921fb 	.word	0x400921fb
 8001168:	40668000 	.word	0x40668000
 800116c:	43b40000 	.word	0x43b40000

08001170 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001182:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_ADC1_Init+0xb0>)
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <MX_ADC1_Init+0xb4>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_ADC1_Init+0xb0>)
 800118a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <MX_ADC1_Init+0xb0>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <MX_ADC1_Init+0xb0>)
 8001198:	2201      	movs	r2, #1
 800119a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <MX_ADC1_Init+0xb0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <MX_ADC1_Init+0xb8>)
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011be:	2202      	movs	r2, #2
 80011c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011d2:	f001 fb0b 	bl	80027ec <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011dc:	f000 faf8 	bl	80017d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011e8:	2307      	movs	r3, #7
 80011ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	480b      	ldr	r0, [pc, #44]	; (8001220 <MX_ADC1_Init+0xb0>)
 80011f2:	f001 fc4d 	bl	8002a90 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011fc:	f000 fae8 	bl	80017d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_ADC1_Init+0xb0>)
 800120a:	f001 fc41 	bl	8002a90 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001214:	f000 fadc 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000011c 	.word	0x2000011c
 8001224:	40012000 	.word	0x40012000
 8001228:	0f000001 	.word	0x0f000001

0800122c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d157      	bne.n	80012fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_ADC_MspInit+0xe0>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_ADC_MspInit+0xe0>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_ADC_MspInit+0xe0>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_ADC_MspInit+0xe0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_ADC_MspInit+0xe0>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_ADC_MspInit+0xe0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001286:	2303      	movs	r3, #3
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 800129a:	f002 fbad 	bl	80039f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0xec>)
 80012a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012e4:	f001 ff86 	bl	80031f4 <HAL_DMA_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80012ee:	f000 fa6f 	bl	80017d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40012000 	.word	0x40012000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	20000164 	.word	0x20000164
 8001318:	40026410 	.word	0x40026410

0800131c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_DMA_Init+0x3c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <MX_DMA_Init+0x3c>)
 800132c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_DMA_Init+0x3c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2038      	movs	r0, #56	; 0x38
 8001344:	f001 ff1f 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001348:	2038      	movs	r0, #56	; 0x38
 800134a:	f001 ff38 	bl	80031be <HAL_NVIC_EnableIRQ>

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_GPIO_Init+0x68>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <MX_GPIO_Init+0x68>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_GPIO_Init+0x68>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_GPIO_Init+0x68>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <MX_GPIO_Init+0x68>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_GPIO_Init+0x68>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_GPIO_Init+0x68>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <MX_GPIO_Init+0x68>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_GPIO_Init+0x68>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <MX_I2C1_Init+0x54>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_I2C1_Init+0x50>)
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_I2C1_Init+0x58>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_I2C1_Init+0x50>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_I2C1_Init+0x50>)
 8001406:	f002 fc7b 	bl	8003d00 <HAL_I2C_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001410:	f000 f9de 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200001c4 	.word	0x200001c4
 800141c:	40005400 	.word	0x40005400
 8001420:	00061a80 	.word	0x00061a80

08001424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_I2C_MspInit+0x84>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d12c      	bne.n	80014a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_I2C_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_I2C_MspInit+0x88>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_I2C_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001468:	2312      	movs	r3, #18
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001474:	2304      	movs	r3, #4
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <HAL_I2C_MspInit+0x8c>)
 8001480:	f002 faba 	bl	80039f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_I2C_MspInit+0x88>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_I2C_MspInit+0x88>)
 800148e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_I2C_MspInit+0x88>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40005400 	.word	0x40005400
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020400 	.word	0x40020400

080014b4 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014bc:	1d39      	adds	r1, r7, #4
 80014be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c2:	2201      	movs	r2, #1
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <__io_putchar+0x20>)
 80014c6:	f004 fd34 	bl	8005f32 <HAL_UART_Transmit>
return ch;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000037c 	.word	0x2000037c

080014d8 <caluclate_depth>:

float depth=0;
float battery_voltage=0;


int caluclate_depth(uint16_t raw_pressure_value){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
	int estimated_depth_in_cm=(int)(raw_pressure_value-OFFSET)*CENTIMETER_PER_BIT;
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f2a3 2367 	subw	r3, r3, #615	; 0x267
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f81b 	bl	8000524 <__aeabi_i2d>
 80014ee:	a30a      	add	r3, pc, #40	; (adr r3, 8001518 <caluclate_depth+0x40>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f880 	bl	80005f8 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb2a 	bl	8000b58 <__aeabi_d2iz>
 8001504:	4603      	mov	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]
	return estimated_depth_in_cm;
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	4bc6a7f0 	.word	0x4bc6a7f0
 800151c:	40008937 	.word	0x40008937

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f001 f8ee 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f8ce 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff ff14 	bl	800135c <MX_GPIO_Init>
  MX_DMA_Init();
 8001534:	f7ff fef2 	bl	800131c <MX_DMA_Init>
  MX_I2C1_Init();
 8001538:	f7ff ff46 	bl	80013c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800153c:	f001 f80a 	bl	8002554 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001540:	f7ff fe16 	bl	8001170 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001544:	f000 fe00 	bl	8002148 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001548:	f000 fea6 	bl	8002298 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800154c:	f000 ffd8 	bl	8002500 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT (&huart2, velocities, 4);
 8001550:	2204      	movs	r2, #4
 8001552:	4953      	ldr	r1, [pc, #332]	; (80016a0 <main+0x180>)
 8001554:	4853      	ldr	r0, [pc, #332]	; (80016a4 <main+0x184>)
 8001556:	f004 fd7e 	bl	8006056 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, &adc_values, 2);
 800155a:	2202      	movs	r2, #2
 800155c:	4952      	ldr	r1, [pc, #328]	; (80016a8 <main+0x188>)
 800155e:	4853      	ldr	r0, [pc, #332]	; (80016ac <main+0x18c>)
 8001560:	f001 f988 	bl	8002874 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001564:	2100      	movs	r1, #0
 8001566:	4852      	ldr	r0, [pc, #328]	; (80016b0 <main+0x190>)
 8001568:	f004 f832 	bl	80055d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800156c:	2104      	movs	r1, #4
 800156e:	4850      	ldr	r0, [pc, #320]	; (80016b0 <main+0x190>)
 8001570:	f004 f82e 	bl	80055d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001574:	2108      	movs	r1, #8
 8001576:	484e      	ldr	r0, [pc, #312]	; (80016b0 <main+0x190>)
 8001578:	f004 f82a 	bl	80055d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800157c:	210c      	movs	r1, #12
 800157e:	484c      	ldr	r0, [pc, #304]	; (80016b0 <main+0x190>)
 8001580:	f004 f826 	bl	80055d0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,300);
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <main+0x190>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,300);
 800158e:	4b48      	ldr	r3, [pc, #288]	; (80016b0 <main+0x190>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001596:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,300);
 8001598:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <main+0x190>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015a0:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,300);
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <main+0x190>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40

  while (MPU6050_Init(&hi2c1) == 1);
 80015ac:	bf00      	nop
 80015ae:	4841      	ldr	r0, [pc, #260]	; (80016b4 <main+0x194>)
 80015b0:	f000 f915 	bl	80017de <MPU6050_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d0f9      	beq.n	80015ae <main+0x8e>
  QMC_init(&module, &hi2c1, 200);
 80015ba:	22c8      	movs	r2, #200	; 0xc8
 80015bc:	493d      	ldr	r1, [pc, #244]	; (80016b4 <main+0x194>)
 80015be:	483e      	ldr	r0, [pc, #248]	; (80016b8 <main+0x198>)
 80015c0:	f7ff fcc4 	bl	8000f4c <QMC_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("-----| MPU6050 AND PWM TEST |-----\r\n ");
 80015c4:	483d      	ldr	r0, [pc, #244]	; (80016bc <main+0x19c>)
 80015c6:	f005 fd11 	bl	8006fec <iprintf>
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80015ca:	493d      	ldr	r1, [pc, #244]	; (80016c0 <main+0x1a0>)
 80015cc:	4839      	ldr	r0, [pc, #228]	; (80016b4 <main+0x194>)
 80015ce:	f000 f95f 	bl	8001890 <MPU6050_Read_All>
	  QMC_read(&module);
 80015d2:	4839      	ldr	r0, [pc, #228]	; (80016b8 <main+0x198>)
 80015d4:	f7ff fd28 	bl	8001028 <QMC_read>

	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,200+(int)velocities[0]);        // A is left UP engine
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <main+0x180>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <main+0x190>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,200+(int)velocities[1]);        // B is right UP engine
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <main+0x180>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <main+0x190>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,200+(int)velocities[2]);        // C is left forward engine
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <main+0x180>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <main+0x190>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	63da      	str	r2, [r3, #60]	; 0x3c
	  	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,200+(int)velocities[3]);        // D is right forward engine
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <main+0x180>)
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <main+0x190>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
	  	static int iterator=0;
	  	int depth=0;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]

	  	iterator++;
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <main+0x1a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <main+0x1a4>)
 800161c:	6013      	str	r3, [r2, #0]
	  	if (iterator>500){
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <main+0x1a4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001626:	ddd0      	ble.n	80015ca <main+0xaa>
	  		depth=caluclate_depth(adc_values[0]);
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <main+0x188>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff53 	bl	80014d8 <caluclate_depth>
 8001632:	6078      	str	r0, [r7, #4]
	  		printf("<%d,%d,%d,%d,%d,%d,%d,%d,%d>\r\n",(int)velocities[0],(int)velocities[1],(int)velocities[2],(int)velocities[3],(int)MPU6050.KalmanAngleX,(int)MPU6050.KalmanAngleY,(int)module.heading,(int)depth,(int)adc_values[1]);
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <main+0x180>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461e      	mov	r6, r3
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <main+0x180>)
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	4698      	mov	r8, r3
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <main+0x180>)
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	4699      	mov	r9, r3
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <main+0x180>)
 8001648:	78db      	ldrb	r3, [r3, #3]
 800164a:	461d      	mov	r5, r3
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <main+0x1a0>)
 800164e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fa7f 	bl	8000b58 <__aeabi_d2iz>
 800165a:	4604      	mov	r4, r0
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <main+0x1a0>)
 800165e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa77 	bl	8000b58 <__aeabi_d2iz>
 800166a:	4602      	mov	r2, r0
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <main+0x198>)
 800166e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	ee17 1a90 	vmov	r1, s15
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <main+0x188>)
 800167c:	885b      	ldrh	r3, [r3, #2]
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	9304      	str	r3, [sp, #16]
 8001684:	9103      	str	r1, [sp, #12]
 8001686:	9202      	str	r2, [sp, #8]
 8001688:	9401      	str	r4, [sp, #4]
 800168a:	9500      	str	r5, [sp, #0]
 800168c:	464b      	mov	r3, r9
 800168e:	4642      	mov	r2, r8
 8001690:	4631      	mov	r1, r6
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <main+0x1a8>)
 8001694:	f005 fcaa 	bl	8006fec <iprintf>
	  		iterator=0;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <main+0x1a4>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
  {
 800169e:	e794      	b.n	80015ca <main+0xaa>
 80016a0:	2000028c 	.word	0x2000028c
 80016a4:	2000037c 	.word	0x2000037c
 80016a8:	20000298 	.word	0x20000298
 80016ac:	2000011c 	.word	0x2000011c
 80016b0:	200002a8 	.word	0x200002a8
 80016b4:	200001c4 	.word	0x200001c4
 80016b8:	20000270 	.word	0x20000270
 80016bc:	080088c8 	.word	0x080088c8
 80016c0:	20000218 	.word	0x20000218
 80016c4:	2000029c 	.word	0x2000029c
 80016c8:	080088f0 	.word	0x080088f0

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b094      	sub	sp, #80	; 0x50
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 fc7e 	bl	8006fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <SystemClock_Config+0xcc>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a27      	ldr	r2, [pc, #156]	; (8001798 <SystemClock_Config+0xcc>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <SystemClock_Config+0xcc>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <SystemClock_Config+0xd0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <SystemClock_Config+0xd0>)
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <SystemClock_Config+0xd0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	2301      	movs	r3, #1
 800172e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001740:	2319      	movs	r3, #25
 8001742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001744:	23a8      	movs	r3, #168	; 0xa8
 8001746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	4618      	mov	r0, r3
 8001756:	f003 fa93 	bl	8004c80 <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001760:	f000 f836 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	2102      	movs	r1, #2
 8001780:	4618      	mov	r0, r3
 8001782:	f003 fcf5 	bl	8005170 <HAL_RCC_ClockConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800178c:	f000 f820 	bl	80017d0 <Error_Handler>
  }
}
 8001790:	bf00      	nop
 8001792:	3750      	adds	r7, #80	; 0x50
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]


    if(huart->Instance == USART2){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_UART_RxCpltCallback+0x24>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d104      	bne.n	80017bc <HAL_UART_RxCpltCallback+0x1c>

    HAL_UART_Receive_IT(&huart2, velocities, 4);
 80017b2:	2204      	movs	r2, #4
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <HAL_UART_RxCpltCallback+0x28>)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_RxCpltCallback+0x2c>)
 80017b8:	f004 fc4d 	bl	8006056 <HAL_UART_Receive_IT>
	}
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40004400 	.word	0x40004400
 80017c8:	2000028c 	.word	0x2000028c
 80017cc:	2000037c 	.word	0x2000037c

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80017de:	b580      	push	{r7, lr}
 80017e0:	b088      	sub	sp, #32
 80017e2:	af04      	add	r7, sp, #16
 80017e4:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	2301      	movs	r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	f107 030f 	add.w	r3, r7, #15
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	2275      	movs	r2, #117	; 0x75
 80017f8:	21d0      	movs	r1, #208	; 0xd0
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f002 fcbe 	bl	800417c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b68      	cmp	r3, #104	; 0x68
 8001804:	d13d      	bne.n	8001882 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800180a:	2364      	movs	r3, #100	; 0x64
 800180c:	9302      	str	r3, [sp, #8]
 800180e:	2301      	movs	r3, #1
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	f107 030e 	add.w	r3, r7, #14
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2301      	movs	r3, #1
 800181a:	226b      	movs	r2, #107	; 0x6b
 800181c:	21d0      	movs	r1, #208	; 0xd0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f002 fbb2 	bl	8003f88 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001824:	2307      	movs	r3, #7
 8001826:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2301      	movs	r3, #1
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	f107 030e 	add.w	r3, r7, #14
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	2219      	movs	r2, #25
 800183a:	21d0      	movs	r1, #208	; 0xd0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f002 fba3 	bl	8003f88 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001842:	2300      	movs	r3, #0
 8001844:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	2301      	movs	r3, #1
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	f107 030e 	add.w	r3, r7, #14
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2301      	movs	r3, #1
 8001856:	221c      	movs	r2, #28
 8001858:	21d0      	movs	r1, #208	; 0xd0
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f002 fb94 	bl	8003f88 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001860:	2300      	movs	r3, #0
 8001862:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001864:	2364      	movs	r3, #100	; 0x64
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f107 030e 	add.w	r3, r7, #14
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	221b      	movs	r2, #27
 8001876:	21d0      	movs	r1, #208	; 0xd0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f002 fb85 	bl	8003f88 <HAL_I2C_Mem_Write>
        return 0;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <MPU6050_Init+0xa6>
    }
    return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	0000      	movs	r0, r0
	...

08001890 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b094      	sub	sp, #80	; 0x50
 8001896:	af04      	add	r7, sp, #16
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800189c:	2364      	movs	r3, #100	; 0x64
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	230e      	movs	r3, #14
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	223b      	movs	r2, #59	; 0x3b
 80018ae:	21d0      	movs	r1, #208	; 0xd0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f002 fc63 	bl	800417c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80018b6:	7a3b      	ldrb	r3, [r7, #8]
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	7a7b      	ldrb	r3, [r7, #9]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80018c8:	7abb      	ldrb	r3, [r7, #10]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80018da:	7b3b      	ldrb	r3, [r7, #12]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21a      	sxth	r2, r3
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80018fa:	7c3b      	ldrb	r3, [r7, #16]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	7c7b      	ldrb	r3, [r7, #17]
 8001902:	b21b      	sxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b21a      	sxth	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800190c:	7cbb      	ldrb	r3, [r7, #18]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	7cfb      	ldrb	r3, [r7, #19]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b21a      	sxth	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800191e:	7d3b      	ldrb	r3, [r7, #20]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	7d7b      	ldrb	r3, [r7, #21]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21a      	sxth	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdf4 	bl	8000524 <__aeabi_i2d>
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4bbd      	ldr	r3, [pc, #756]	; (8001c38 <MPU6050_Read_All+0x3a8>)
 8001942:	f7fe ff83 	bl	800084c <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	6839      	ldr	r1, [r7, #0]
 800194c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fde4 	bl	8000524 <__aeabi_i2d>
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4bb5      	ldr	r3, [pc, #724]	; (8001c38 <MPU6050_Read_All+0x3a8>)
 8001962:	f7fe ff73 	bl	800084c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdd4 	bl	8000524 <__aeabi_i2d>
 800197c:	a3a8      	add	r3, pc, #672	; (adr r3, 8001c20 <MPU6050_Read_All+0x390>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe ff63 	bl	800084c <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	6839      	ldr	r1, [r7, #0]
 800198c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001990:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001c3c <MPU6050_Read_All+0x3ac>
 80019a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001c40 <MPU6050_Read_All+0x3b0>
 80019a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdb3 	bl	8000524 <__aeabi_i2d>
 80019be:	a39a      	add	r3, pc, #616	; (adr r3, 8001c28 <MPU6050_Read_All+0x398>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe ff42 	bl	800084c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	6839      	ldr	r1, [r7, #0]
 80019ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fda3 	bl	8000524 <__aeabi_i2d>
 80019de:	a392      	add	r3, pc, #584	; (adr r3, 8001c28 <MPU6050_Read_All+0x398>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f7fe ff32 	bl	800084c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd93 	bl	8000524 <__aeabi_i2d>
 80019fe:	a38a      	add	r3, pc, #552	; (adr r3, 8001c28 <MPU6050_Read_All+0x398>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe ff22 	bl	800084c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001a12:	f000 fedf 	bl	80027d4 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <MPU6050_Read_All+0x3b4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd70 	bl	8000504 <__aeabi_ui2d>
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	4b87      	ldr	r3, [pc, #540]	; (8001c48 <MPU6050_Read_All+0x3b8>)
 8001a2a:	f7fe ff0f 	bl	800084c <__aeabi_ddiv>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001a36:	f000 fecd 	bl	80027d4 <HAL_GetTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a81      	ldr	r2, [pc, #516]	; (8001c44 <MPU6050_Read_All+0x3b4>)
 8001a3e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	fb03 f202 	mul.w	r2, r3, r2
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd5c 	bl	8000524 <__aeabi_i2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b10 	vmov	d0, r2, r3
 8001a74:	f006 fbf3 	bl	800825e <sqrt>
 8001a78:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a88:	f7ff f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11f      	bne.n	8001ad2 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd43 	bl	8000524 <__aeabi_i2d>
 8001a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aa2:	f7fe fed3 	bl	800084c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	ec43 2b17 	vmov	d7, r2, r3
 8001aae:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab2:	eef0 0a67 	vmov.f32	s1, s15
 8001ab6:	f006 fa27 	bl	8007f08 <atan>
 8001aba:	ec51 0b10 	vmov	r0, r1, d0
 8001abe:	a35c      	add	r3, pc, #368	; (adr r3, 8001c30 <MPU6050_Read_All+0x3a0>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fd98 	bl	80005f8 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ad0:	e005      	b.n	8001ade <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd1c 	bl	8000524 <__aeabi_i2d>
 8001aec:	4682      	mov	sl, r0
 8001aee:	468b      	mov	fp, r1
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd14 	bl	8000524 <__aeabi_i2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	ec43 2b11 	vmov	d1, r2, r3
 8001b04:	ec4b ab10 	vmov	d0, sl, fp
 8001b08:	f006 fba7 	bl	800825a <atan2>
 8001b0c:	ec51 0b10 	vmov	r0, r1, d0
 8001b10:	a347      	add	r3, pc, #284	; (adr r3, 8001c30 <MPU6050_Read_All+0x3a0>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd6f 	bl	80005f8 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <MPU6050_Read_All+0x3bc>)
 8001b28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b2c:	f7fe ffd6 	bl	8000adc <__aeabi_dcmplt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <MPU6050_Read_All+0x2bc>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <MPU6050_Read_All+0x3c0>)
 8001b42:	f7fe ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d114      	bne.n	8001b76 <MPU6050_Read_All+0x2e6>
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <MPU6050_Read_All+0x3c0>)
 8001b52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b56:	f7fe ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <MPU6050_Read_All+0x2fc>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <MPU6050_Read_All+0x3bc>)
 8001b6c:	f7fe ffb6 	bl	8000adc <__aeabi_dcmplt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8001b76:	4937      	ldr	r1, [pc, #220]	; (8001c54 <MPU6050_Read_All+0x3c4>)
 8001b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b86:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b8a:	e014      	b.n	8001bb6 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b92:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b96:	eeb0 1a47 	vmov.f32	s2, s14
 8001b9a:	eef0 1a67 	vmov.f32	s3, s15
 8001b9e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ba2:	482c      	ldr	r0, [pc, #176]	; (8001c54 <MPU6050_Read_All+0x3c4>)
 8001ba4:	f000 f85a 	bl	8001c5c <Kalman_getAngle>
 8001ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bac:	eef0 7a60 	vmov.f32	s15, s1
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001bbc:	4690      	mov	r8, r2
 8001bbe:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MPU6050_Read_All+0x3c0>)
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bdc:	4614      	mov	r4, r2
 8001bde:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001bee:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001bf2:	eeb0 1a47 	vmov.f32	s2, s14
 8001bf6:	eef0 1a67 	vmov.f32	s3, s15
 8001bfa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001bfe:	4816      	ldr	r0, [pc, #88]	; (8001c58 <MPU6050_Read_All+0x3c8>)
 8001c00:	f000 f82c 	bl	8001c5c <Kalman_getAngle>
 8001c04:	eeb0 7a40 	vmov.f32	s14, s0
 8001c08:	eef0 7a60 	vmov.f32	s15, s1
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8001c12:	bf00      	nop
 8001c14:	3740      	adds	r7, #64	; 0x40
 8001c16:	46bd      	mov	sp, r7
 8001c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1c:	f3af 8000 	nop.w
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40cc2900 	.word	0x40cc2900
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	40606000 	.word	0x40606000
 8001c30:	1a63c1f8 	.word	0x1a63c1f8
 8001c34:	404ca5dc 	.word	0x404ca5dc
 8001c38:	40d00000 	.word	0x40d00000
 8001c3c:	43aa0000 	.word	0x43aa0000
 8001c40:	42121eb8 	.word	0x42121eb8
 8001c44:	200002a0 	.word	0x200002a0
 8001c48:	408f4000 	.word	0x408f4000
 8001c4c:	c0568000 	.word	0xc0568000
 8001c50:	40568000 	.word	0x40568000
 8001c54:	20000048 	.word	0x20000048
 8001c58:	20000000 	.word	0x20000000

08001c5c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b096      	sub	sp, #88	; 0x58
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	61f8      	str	r0, [r7, #28]
 8001c64:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c68:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c6c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c7a:	f7fe fb05 	bl	8000288 <__aeabi_dsub>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f7fe faf4 	bl	800028c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	69f9      	ldr	r1, [r7, #28]
 8001caa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cbe:	f7fe fc9b 	bl	80005f8 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cd0:	f7fe fada 	bl	8000288 <__aeabi_dsub>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ce2:	f7fe fad1 	bl	8000288 <__aeabi_dsub>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe faca 	bl	800028c <__adddf3>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d04:	f7fe fc78 	bl	80005f8 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe fabc 	bl	800028c <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	69f9      	ldr	r1, [r7, #28]
 8001d1a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d2e:	f7fe fc63 	bl	80005f8 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4620      	mov	r0, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	f7fe faa5 	bl	8000288 <__aeabi_dsub>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	69f9      	ldr	r1, [r7, #28]
 8001d44:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d58:	f7fe fc4e 	bl	80005f8 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fa90 	bl	8000288 <__aeabi_dsub>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	69f9      	ldr	r1, [r7, #28]
 8001d6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d82:	f7fe fc39 	bl	80005f8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	f7fe fa7d 	bl	800028c <__adddf3>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	69f9      	ldr	r1, [r7, #28]
 8001d98:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001dba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dbe:	f7fe fd45 	bl	800084c <__aeabi_ddiv>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dd4:	f7fe fd3a 	bl	800084c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001de6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dea:	f7fe fa4d 	bl	8000288 <__aeabi_dsub>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e04:	f7fe fbf8 	bl	80005f8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fa3c 	bl	800028c <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	69f9      	ldr	r1, [r7, #28]
 8001e1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e2c:	f7fe fbe4 	bl	80005f8 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fa28 	bl	800028c <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	69f9      	ldr	r1, [r7, #28]
 8001e42:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e68:	f7fe fbc6 	bl	80005f8 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fa08 	bl	8000288 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	69f9      	ldr	r1, [r7, #28]
 8001e7e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e90:	f7fe fbb2 	bl	80005f8 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe f9f4 	bl	8000288 <__aeabi_dsub>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	69f9      	ldr	r1, [r7, #28]
 8001ea6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001eb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001eb8:	f7fe fb9e 	bl	80005f8 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	f7fe f9e0 	bl	8000288 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	69f9      	ldr	r1, [r7, #28]
 8001ece:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ed8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001edc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ee0:	f7fe fb8a 	bl	80005f8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe f9cc 	bl	8000288 <__aeabi_dsub>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	69f9      	ldr	r1, [r7, #28]
 8001ef6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f00:	ec43 2b17 	vmov	d7, r2, r3
};
 8001f04:	eeb0 0a47 	vmov.f32	s0, s14
 8001f08:	eef0 0a67 	vmov.f32	s1, s15
 8001f0c:	3758      	adds	r7, #88	; 0x58
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb8:	f000 fbf8 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART2_IRQHandler+0x10>)
 8001fc6:	f004 f877 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000037c 	.word	0x2000037c

08001fd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA2_Stream0_IRQHandler+0x10>)
 8001fda:	f001 faa3 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000164 	.word	0x20000164

08001fe8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ffa:	f3af 8000 	nop.w
 8001ffe:	4601      	mov	r1, r0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf0      	blt.n	8001ffa <_read+0x12>
	}

return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e009      	b.n	8002048 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fa39 	bl	80014b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf1      	blt.n	8002034 <_write+0x12>
	}
	return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_close>:

int _close(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002082:	605a      	str	r2, [r3, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_isatty>:

int _isatty(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	return 1;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <_sbrk+0x50>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x16>
		heap_end = &end;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <_sbrk+0x50>)
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <_sbrk+0x54>)
 80020d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <_sbrk+0x50>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <_sbrk+0x50>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	466a      	mov	r2, sp
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d907      	bls.n	80020fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020ee:	f004 ff4b 	bl	8006f88 <__errno>
 80020f2:	4603      	mov	r3, r0
 80020f4:	220c      	movs	r2, #12
 80020f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	e006      	b.n	800210c <_sbrk+0x48>
	}

	heap_end += incr;
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <_sbrk+0x50>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a03      	ldr	r2, [pc, #12]	; (8002114 <_sbrk+0x50>)
 8002108:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200002a4 	.word	0x200002a4
 8002118:	200003d8 	.word	0x200003d8

0800211c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <SystemInit+0x28>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	4a07      	ldr	r2, [pc, #28]	; (8002144 <SystemInit+0x28>)
 8002128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800212c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SystemInit+0x28>)
 8002132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002136:	609a      	str	r2, [r3, #8]
#endif
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b092      	sub	sp, #72	; 0x48
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
 8002168:	615a      	str	r2, [r3, #20]
 800216a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2220      	movs	r2, #32
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f004 ff32 	bl	8006fdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002178:	4b45      	ldr	r3, [pc, #276]	; (8002290 <MX_TIM1_Init+0x148>)
 800217a:	4a46      	ldr	r2, [pc, #280]	; (8002294 <MX_TIM1_Init+0x14c>)
 800217c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 420-1;
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <MX_TIM1_Init+0x148>)
 8002180:	f240 12a3 	movw	r2, #419	; 0x1a3
 8002184:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b42      	ldr	r3, [pc, #264]	; (8002290 <MX_TIM1_Init+0x148>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <MX_TIM1_Init+0x148>)
 800218e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002192:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <MX_TIM1_Init+0x148>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <MX_TIM1_Init+0x148>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <MX_TIM1_Init+0x148>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021a6:	483a      	ldr	r0, [pc, #232]	; (8002290 <MX_TIM1_Init+0x148>)
 80021a8:	f003 f9c2 	bl	8005530 <HAL_TIM_PWM_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80021b2:	f7ff fb0d 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021c2:	4619      	mov	r1, r3
 80021c4:	4832      	ldr	r0, [pc, #200]	; (8002290 <MX_TIM1_Init+0x148>)
 80021c6:	f003 fda7 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80021d0:	f7ff fafe 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d4:	2360      	movs	r3, #96	; 0x60
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4825      	ldr	r0, [pc, #148]	; (8002290 <MX_TIM1_Init+0x148>)
 80021fa:	f003 fa99 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002204:	f7ff fae4 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	2204      	movs	r2, #4
 800220e:	4619      	mov	r1, r3
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM1_Init+0x148>)
 8002212:	f003 fa8d 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 800221c:	f7ff fad8 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	2208      	movs	r2, #8
 8002226:	4619      	mov	r1, r3
 8002228:	4819      	ldr	r0, [pc, #100]	; (8002290 <MX_TIM1_Init+0x148>)
 800222a:	f003 fa81 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002234:	f7ff facc 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	220c      	movs	r2, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_TIM1_Init+0x148>)
 8002242:	f003 fa75 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800224c:	f7ff fac0 	bl	80017d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002268:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM1_Init+0x148>)
 8002274:	f003 fdbe 	bl	8005df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800227e:	f7ff faa7 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM1_Init+0x148>)
 8002284:	f000 f8bc 	bl	8002400 <HAL_TIM_MspPostInit>

}
 8002288:	bf00      	nop
 800228a:	3748      	adds	r7, #72	; 0x48
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200002a8 	.word	0x200002a8
 8002294:	40010000 	.word	0x40010000

08002298 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	611a      	str	r2, [r3, #16]
 80022b6:	615a      	str	r2, [r3, #20]
 80022b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022bc:	4a33      	ldr	r2, [pc, #204]	; (800238c <MX_TIM3_Init+0xf4>)
 80022be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 420-1;
 80022c0:	4b31      	ldr	r3, [pc, #196]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022c2:	f240 12a3 	movw	r2, #419	; 0x1a3
 80022c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000-1;
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022d0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80022d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022e2:	4829      	ldr	r0, [pc, #164]	; (8002388 <MX_TIM3_Init+0xf0>)
 80022e4:	f003 f924 	bl	8005530 <HAL_TIM_PWM_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80022ee:	f7ff fa6f 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022fa:	f107 0320 	add.w	r3, r7, #32
 80022fe:	4619      	mov	r1, r3
 8002300:	4821      	ldr	r0, [pc, #132]	; (8002388 <MX_TIM3_Init+0xf0>)
 8002302:	f003 fd09 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800230c:	f7ff fa60 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002310:	2360      	movs	r3, #96	; 0x60
 8002312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	4619      	mov	r1, r3
 8002326:	4818      	ldr	r0, [pc, #96]	; (8002388 <MX_TIM3_Init+0xf0>)
 8002328:	f003 fa02 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002332:	f7ff fa4d 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2204      	movs	r2, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4812      	ldr	r0, [pc, #72]	; (8002388 <MX_TIM3_Init+0xf0>)
 800233e:	f003 f9f7 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002348:	f7ff fa42 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2208      	movs	r2, #8
 8002350:	4619      	mov	r1, r3
 8002352:	480d      	ldr	r0, [pc, #52]	; (8002388 <MX_TIM3_Init+0xf0>)
 8002354:	f003 f9ec 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800235e:	f7ff fa37 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	220c      	movs	r2, #12
 8002366:	4619      	mov	r1, r3
 8002368:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_TIM3_Init+0xf0>)
 800236a:	f003 f9e1 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002374:	f7ff fa2c 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <MX_TIM3_Init+0xf0>)
 800237a:	f000 f841 	bl	8002400 <HAL_TIM_MspPostInit>

}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200002f0 	.word	0x200002f0
 800238c:	40000400 	.word	0x40000400

08002390 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a15      	ldr	r2, [pc, #84]	; (80023f4 <HAL_TIM_PWM_MspInit+0x64>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10e      	bne.n	80023c0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_TIM_PWM_MspInit+0x68>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_TIM_PWM_MspInit+0x68>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_TIM_PWM_MspInit+0x68>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023be:	e012      	b.n	80023e6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_TIM_PWM_MspInit+0x6c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10d      	bne.n	80023e6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_TIM_PWM_MspInit+0x68>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_TIM_PWM_MspInit+0x68>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_TIM_PWM_MspInit+0x68>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40000400 	.word	0x40000400

08002400 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a33      	ldr	r2, [pc, #204]	; (80024ec <HAL_TIM_MspPostInit+0xec>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d11f      	bne.n	8002462 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800243e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <HAL_TIM_MspPostInit+0xf4>)
 800245c:	f001 facc 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002460:	e040      	b.n	80024e4 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_TIM_MspPostInit+0xf8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d13b      	bne.n	80024e4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6313      	str	r3, [r2, #48]	; 0x30
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	6313      	str	r3, [r2, #48]	; 0x30
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_TIM_MspPostInit+0xf0>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024b4:	2302      	movs	r3, #2
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <HAL_TIM_MspPostInit+0xf4>)
 80024c0:	f001 fa9a 	bl	80039f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024c4:	2303      	movs	r3, #3
 80024c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024d4:	2302      	movs	r3, #2
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <HAL_TIM_MspPostInit+0xfc>)
 80024e0:	f001 fa8a 	bl	80039f8 <HAL_GPIO_Init>
}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40010000 	.word	0x40010000
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40020400 	.word	0x40020400

08002500 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <MX_USART1_UART_Init+0x50>)
 8002508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_USART1_UART_Init+0x4c>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_USART1_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_USART1_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002538:	f003 fcae 	bl	8005e98 <HAL_UART_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002542:	f7ff f945 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000338 	.word	0x20000338
 8002550:	40011000 	.word	0x40011000

08002554 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <MX_USART2_UART_Init+0x50>)
 800255c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 8002560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_USART2_UART_Init+0x4c>)
 800258c:	f003 fc84 	bl	8005e98 <HAL_UART_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002596:	f7ff f91b 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000037c 	.word	0x2000037c
 80025a4:	40004400 	.word	0x40004400

080025a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_UART_MspInit+0xf8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d12c      	bne.n	8002624 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 80025d4:	f043 0310 	orr.w	r3, r3, #16
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002602:	23c0      	movs	r3, #192	; 0xc0
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002612:	2307      	movs	r3, #7
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <HAL_UART_MspInit+0x100>)
 800261e:	f001 f9eb 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002622:	e038      	b.n	8002696 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <HAL_UART_MspInit+0x104>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d133      	bne.n	8002696 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_UART_MspInit+0xfc>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002666:	230c      	movs	r3, #12
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002676:	2307      	movs	r3, #7
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <HAL_UART_MspInit+0x108>)
 8002682:	f001 f9b9 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2026      	movs	r0, #38	; 0x26
 800268c:	f000 fd7b 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002690:	2026      	movs	r0, #38	; 0x26
 8002692:	f000 fd94 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3730      	adds	r7, #48	; 0x30
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40004400 	.word	0x40004400
 80026b0:	40020000 	.word	0x40020000

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
  ldr  r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026de:	f7ff fd1d 	bl	800211c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f004 fc57 	bl	8006f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7fe ff1b 	bl	8001520 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026ec:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80026f0:	08008a80 	.word	0x08008a80
  ldr  r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026f8:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 80026fc:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8002700:	200003d4 	.word	0x200003d4

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_Init+0x40>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_Init+0x40>)
 800271e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x40>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 fd1d 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fbea 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fd35 	bl	80031da <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 fcfd 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000090 	.word	0x20000090
 80027a4:	20000098 	.word	0x20000098
 80027a8:	20000094 	.word	0x20000094

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000098 	.word	0x20000098
 80027d0:	200003c0 	.word	0x200003c0

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200003c0 	.word	0x200003c0

080027ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e033      	b.n	800286a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fd0e 	bl	800122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa48 	bl	8002cd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
 800285a:	e001      	b.n	8002860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_ADC_Start_DMA+0x1e>
 800288e:	2302      	movs	r3, #2
 8002890:	e0ce      	b.n	8002a30 <HAL_ADC_Start_DMA+0x1bc>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d018      	beq.n	80028da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028b8:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_ADC_Start_DMA+0x1c4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5f      	ldr	r2, [pc, #380]	; (8002a3c <HAL_ADC_Start_DMA+0x1c8>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0c9a      	lsrs	r2, r3, #18
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d107      	bne.n	80028fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 8086 	bne.w	8002a16 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002948:	d106      	bne.n	8002958 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f023 0206 	bic.w	r2, r3, #6
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
 8002956:	e002      	b.n	800295e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_ADC_Start_DMA+0x1cc>)
 8002968:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4a35      	ldr	r2, [pc, #212]	; (8002a44 <HAL_ADC_Start_DMA+0x1d0>)
 8002970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <HAL_ADC_Start_DMA+0x1d4>)
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	4a33      	ldr	r2, [pc, #204]	; (8002a4c <HAL_ADC_Start_DMA+0x1d8>)
 8002980:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800298a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800299a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	334c      	adds	r3, #76	; 0x4c
 80029b6:	4619      	mov	r1, r3
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f000 fcc8 	bl	8003350 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d129      	bne.n	8002a2e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e020      	b.n	8002a2e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_ADC_Start_DMA+0x1dc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11b      	bne.n	8002a2e <HAL_ADC_Start_DMA+0x1ba>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d114      	bne.n	8002a2e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00b      	b.n	8002a2e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000090 	.word	0x20000090
 8002a3c:	431bde83 	.word	0x431bde83
 8002a40:	40012300 	.word	0x40012300
 8002a44:	08002ecd 	.word	0x08002ecd
 8002a48:	08002f87 	.word	0x08002f87
 8002a4c:	08002fa3 	.word	0x08002fa3
 8002a50:	40012000 	.word	0x40012000

08002a54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e105      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x228>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d925      	bls.n	8002b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68d9      	ldr	r1, [r3, #12]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b1e      	subs	r3, #30
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68d9      	ldr	r1, [r3, #12]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4403      	add	r3, r0
 8002afa:	3b1e      	subs	r3, #30
 8002afc:	409a      	lsls	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	e022      	b.n	8002b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4403      	add	r3, r0
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d824      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b05      	subs	r3, #5
 8002b68:	221f      	movs	r2, #31
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b05      	subs	r3, #5
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b9e:	e04c      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b23      	subs	r3, #35	; 0x23
 8002bba:	221f      	movs	r2, #31
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b23      	subs	r3, #35	; 0x23
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf0:	e023      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b41      	subs	r3, #65	; 0x41
 8002c04:	221f      	movs	r2, #31
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b41      	subs	r3, #65	; 0x41
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_ADC_ConfigChannel+0x234>)
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <HAL_ADC_ConfigChannel+0x238>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d109      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1cc>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b12      	cmp	r3, #18
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <HAL_ADC_ConfigChannel+0x238>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d123      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x21e>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d003      	beq.n	8002c76 <HAL_ADC_ConfigChannel+0x1e6>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b11      	cmp	r3, #17
 8002c74:	d11b      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d111      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_ADC_ConfigChannel+0x23c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <HAL_ADC_ConfigChannel+0x240>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	0c9a      	lsrs	r2, r3, #18
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f9      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012300 	.word	0x40012300
 8002cc8:	40012000 	.word	0x40012000
 8002ccc:	20000090 	.word	0x20000090
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cdc:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <ADC_Init+0x1f0>)
 8002cde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6899      	ldr	r1, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <ADC_Init+0x1f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d022      	beq.n	8002db2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e00f      	b.n	8002dd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0202 	bic.w	r2, r2, #2
 8002de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7e1b      	ldrb	r3, [r3, #24]
 8002dec:	005a      	lsls	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	035a      	lsls	r2, r3, #13
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	e007      	b.n	8002e48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	051a      	lsls	r2, r3, #20
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e8a:	025a      	lsls	r2, r3, #9
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	029a      	lsls	r2, r3, #10
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012300 	.word	0x40012300
 8002ec8:	0f000001 	.word	0x0f000001

08002ecc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d13c      	bne.n	8002f60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d12b      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d127      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d119      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0220 	bic.w	r2, r2, #32
 8002f32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fd7b 	bl	8002a54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f5e:	e00e      	b.n	8002f7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fd85 	bl	8002a7c <HAL_ADC_ErrorCallback>
}
 8002f72:	e004      	b.n	8002f7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fd67 	bl	8002a68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fd5a 	bl	8002a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fec:	4013      	ands	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <__NVIC_GetPriorityGrouping+0x18>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0307 	and.w	r3, r3, #7
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db0b      	blt.n	800305e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <__NVIC_EnableIRQ+0x38>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2001      	movs	r0, #1
 8003056:	fa00 f202 	lsl.w	r2, r0, r2
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff8e 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff29 	bl	8002fd0 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff3e 	bl	8003018 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff8e 	bl	80030c4 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5d 	bl	8003070 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff31 	bl	8003034 <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff fae8 	bl	80027d4 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e099      	b.n	8003344 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003230:	e00f      	b.n	8003252 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003232:	f7ff facf 	bl	80027d4 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b05      	cmp	r3, #5
 800323e:	d908      	bls.n	8003252 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e078      	b.n	8003344 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e8      	bne.n	8003232 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4b38      	ldr	r3, [pc, #224]	; (800334c <HAL_DMA_Init+0x158>)
 800326c:	4013      	ands	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d107      	bne.n	80032bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4313      	orrs	r3, r2
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0307 	bic.w	r3, r3, #7
 80032d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d117      	bne.n	8003316 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fb01 	bl	8003900 <DMA_CheckFifoParam>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003312:	2301      	movs	r3, #1
 8003314:	e016      	b.n	8003344 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fab8 	bl	8003894 <DMA_CalcBaseAndBitshift>
 8003324:	4603      	mov	r3, r0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	223f      	movs	r2, #63	; 0x3f
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	f010803f 	.word	0xf010803f

08003350 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_DMA_Start_IT+0x26>
 8003372:	2302      	movs	r3, #2
 8003374:	e040      	b.n	80033f8 <HAL_DMA_Start_IT+0xa8>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d12f      	bne.n	80033ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fa4a 	bl	8003838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	223f      	movs	r2, #63	; 0x3f
 80033aa:	409a      	lsls	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0216 	orr.w	r2, r2, #22
 80033be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0208 	orr.w	r2, r2, #8
 80033d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e005      	b.n	80033f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
 80033f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800340e:	f7ff f9e1 	bl	80027d4 <HAL_GetTick>
 8003412:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e052      	b.n	80034d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003450:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_Abort+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003482:	e013      	b.n	80034ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003484:	f7ff f9a6 	bl	80027d4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b05      	cmp	r3, #5
 8003490:	d90c      	bls.n	80034ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2203      	movs	r2, #3
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e015      	b.n	80034d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e4      	bne.n	8003484 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	223f      	movs	r2, #63	; 0x3f
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00c      	b.n	8003518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2205      	movs	r2, #5
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003530:	4b8e      	ldr	r3, [pc, #568]	; (800376c <HAL_DMA_IRQHandler+0x248>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a8e      	ldr	r2, [pc, #568]	; (8003770 <HAL_DMA_IRQHandler+0x24c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2208      	movs	r2, #8
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01a      	beq.n	8003590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2208      	movs	r2, #8
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d012      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2201      	movs	r2, #1
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0202 	orr.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	2204      	movs	r2, #4
 80035cc:	409a      	lsls	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e8:	2204      	movs	r2, #4
 80035ea:	409a      	lsls	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	2210      	movs	r2, #16
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d043      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03c      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2210      	movs	r2, #16
 8003620:	409a      	lsls	r2, r3
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d018      	beq.n	8003666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d024      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
 8003652:	e01f      	b.n	8003694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01b      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
 8003664:	e016      	b.n	8003694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0208 	bic.w	r2, r2, #8
 8003682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2220      	movs	r2, #32
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 808f 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8087 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	2220      	movs	r2, #32
 80036bc:	409a      	lsls	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d136      	bne.n	800373c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0216 	bic.w	r2, r2, #22
 80036dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_DMA_IRQHandler+0x1da>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	223f      	movs	r2, #63	; 0x3f
 8003714:	409a      	lsls	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	2b00      	cmp	r3, #0
 8003730:	d07e      	beq.n	8003830 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
        }
        return;
 800373a:	e079      	b.n	8003830 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01d      	beq.n	8003786 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	2b00      	cmp	r3, #0
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e02c      	b.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
 800376a:	bf00      	nop
 800376c:	20000090 	.word	0x20000090
 8003770:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e01e      	b.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10f      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0210 	bic.w	r2, r2, #16
 80037a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d032      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2205      	movs	r2, #5
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d307      	bcc.n	800380c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f2      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x2cc>
 800380a:	e000      	b.n	800380e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800380c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e000      	b.n	8003832 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003830:	bf00      	nop
    }
  }
}
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d108      	bne.n	8003878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003876:	e007      	b.n	8003888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3b10      	subs	r3, #16
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <DMA_CalcBaseAndBitshift+0x64>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <DMA_CalcBaseAndBitshift+0x68>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d909      	bls.n	80038d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	; 0x58
 80038d4:	e007      	b.n	80038e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	aaaaaaab 	.word	0xaaaaaaab
 80038fc:	08008928 	.word	0x08008928

08003900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11f      	bne.n	800395a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d856      	bhi.n	80039ce <DMA_CheckFifoParam+0xce>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <DMA_CheckFifoParam+0x28>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003939 	.word	0x08003939
 800392c:	0800394b 	.word	0x0800394b
 8003930:	08003939 	.word	0x08003939
 8003934:	080039cf 	.word	0x080039cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d046      	beq.n	80039d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e043      	b.n	80039d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003952:	d140      	bne.n	80039d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003958:	e03d      	b.n	80039d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003962:	d121      	bne.n	80039a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d837      	bhi.n	80039da <DMA_CheckFifoParam+0xda>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <DMA_CheckFifoParam+0x70>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	08003981 	.word	0x08003981
 8003974:	08003987 	.word	0x08003987
 8003978:	08003981 	.word	0x08003981
 800397c:	08003999 	.word	0x08003999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e030      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d025      	beq.n	80039de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e022      	b.n	80039de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a0:	d11f      	bne.n	80039e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039a6:	e01c      	b.n	80039e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d903      	bls.n	80039b6 <DMA_CheckFifoParam+0xb6>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d003      	beq.n	80039bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039b4:	e018      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ba:	e015      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      break;
 80039cc:	e00b      	b.n	80039e6 <DMA_CheckFifoParam+0xe6>
      break;
 80039ce:	bf00      	nop
 80039d0:	e00a      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e008      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e006      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039da:	bf00      	nop
 80039dc:	e004      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <DMA_CheckFifoParam+0xe8>
      break;
 80039e6:	bf00      	nop
    }
  } 
  
  return status; 
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e159      	b.n	8003cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f040 8148 	bne.w	8003cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d005      	beq.n	8003a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d130      	bne.n	8003aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	2203      	movs	r2, #3
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a80:	2201      	movs	r2, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 0201 	and.w	r2, r3, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d017      	beq.n	8003ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d123      	bne.n	8003b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0203 	and.w	r2, r3, #3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80a2 	beq.w	8003cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b57      	ldr	r3, [pc, #348]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a56      	ldr	r2, [pc, #344]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <HAL_GPIO_Init+0x2e8>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9a:	4a52      	ldr	r2, [pc, #328]	; (8003ce4 <HAL_GPIO_Init+0x2ec>)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a49      	ldr	r2, [pc, #292]	; (8003ce8 <HAL_GPIO_Init+0x2f0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d019      	beq.n	8003bfa <HAL_GPIO_Init+0x202>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a48      	ldr	r2, [pc, #288]	; (8003cec <HAL_GPIO_Init+0x2f4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_GPIO_Init+0x1fe>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a47      	ldr	r2, [pc, #284]	; (8003cf0 <HAL_GPIO_Init+0x2f8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_GPIO_Init+0x1fa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <HAL_GPIO_Init+0x2fc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d007      	beq.n	8003bee <HAL_GPIO_Init+0x1f6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a45      	ldr	r2, [pc, #276]	; (8003cf8 <HAL_GPIO_Init+0x300>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_GPIO_Init+0x1f2>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e008      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bea:	2307      	movs	r3, #7
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e004      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_GPIO_Init+0x204>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	f002 0203 	and.w	r2, r2, #3
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	4093      	lsls	r3, r2
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0c:	4935      	ldr	r1, [pc, #212]	; (8003ce4 <HAL_GPIO_Init+0x2ec>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c3e:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c44:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cbc:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <HAL_GPIO_Init+0x304>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	f67f aea2 	bls.w	8003a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	3724      	adds	r7, #36	; 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020c00 	.word	0x40020c00
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40013c00 	.word	0x40013c00

08003d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e12b      	b.n	8003f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fb7c 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	; 0x24
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d64:	f001 fbbc 	bl	80054e0 <HAL_RCC_GetPCLK1Freq>
 8003d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4a81      	ldr	r2, [pc, #516]	; (8003f74 <HAL_I2C_Init+0x274>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d807      	bhi.n	8003d84 <HAL_I2C_Init+0x84>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a80      	ldr	r2, [pc, #512]	; (8003f78 <HAL_I2C_Init+0x278>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bf94      	ite	ls
 8003d7c:	2301      	movls	r3, #1
 8003d7e:	2300      	movhi	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e006      	b.n	8003d92 <HAL_I2C_Init+0x92>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a7d      	ldr	r2, [pc, #500]	; (8003f7c <HAL_I2C_Init+0x27c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	bf94      	ite	ls
 8003d8c:	2301      	movls	r3, #1
 8003d8e:	2300      	movhi	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0e7      	b.n	8003f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a78      	ldr	r2, [pc, #480]	; (8003f80 <HAL_I2C_Init+0x280>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0c9b      	lsrs	r3, r3, #18
 8003da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a6a      	ldr	r2, [pc, #424]	; (8003f74 <HAL_I2C_Init+0x274>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d802      	bhi.n	8003dd4 <HAL_I2C_Init+0xd4>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	e009      	b.n	8003de8 <HAL_I2C_Init+0xe8>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4a69      	ldr	r2, [pc, #420]	; (8003f84 <HAL_I2C_Init+0x284>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	3301      	adds	r3, #1
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	495c      	ldr	r1, [pc, #368]	; (8003f74 <HAL_I2C_Init+0x274>)
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d819      	bhi.n	8003e3c <HAL_I2C_Init+0x13c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e59      	subs	r1, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e1c:	400b      	ands	r3, r1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_I2C_Init+0x138>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1e59      	subs	r1, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e36:	e051      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	e04f      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d111      	bne.n	8003e68 <HAL_I2C_Init+0x168>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1e58      	subs	r0, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	440b      	add	r3, r1
 8003e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e56:	3301      	adds	r3, #1
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e012      	b.n	8003e8e <HAL_I2C_Init+0x18e>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Init+0x196>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e022      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10e      	bne.n	8003ebc <HAL_I2C_Init+0x1bc>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e58      	subs	r0, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	440b      	add	r3, r1
 8003eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eba:	e00f      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	0099      	lsls	r1, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	6809      	ldr	r1, [r1, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6911      	ldr	r1, [r2, #16]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68d2      	ldr	r2, [r2, #12]
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	000186a0 	.word	0x000186a0
 8003f78:	001e847f 	.word	0x001e847f
 8003f7c:	003d08ff 	.word	0x003d08ff
 8003f80:	431bde83 	.word	0x431bde83
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fa2:	f7fe fc17 	bl	80027d4 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	f040 80d9 	bne.w	8004168 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2319      	movs	r3, #25
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	496d      	ldr	r1, [pc, #436]	; (8004174 <HAL_I2C_Mem_Write+0x1ec>)
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fc7f 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0cc      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Mem_Write+0x56>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e0c5      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d007      	beq.n	8004004 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2221      	movs	r2, #33	; 0x21
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a4d      	ldr	r2, [pc, #308]	; (8004178 <HAL_I2C_Mem_Write+0x1f0>)
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004046:	88f8      	ldrh	r0, [r7, #6]
 8004048:	893a      	ldrh	r2, [r7, #8]
 800404a:	8979      	ldrh	r1, [r7, #10]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4603      	mov	r3, r0
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fab6 	bl	80045c8 <I2C_RequestMemoryWrite>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d052      	beq.n	8004108 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e081      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fd00 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06b      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_I2C_Mem_Write+0x180>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1aa      	bne.n	8004066 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fcec 	bl	8004af2 <I2C_WaitOnBTFFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	2b04      	cmp	r3, #4
 8004126:	d107      	bne.n	8004138 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e016      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
  }
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	00100002 	.word	0x00100002
 8004178:	ffff0000 	.word	0xffff0000

0800417c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004196:	f7fe fb1d 	bl	80027d4 <HAL_GetTick>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	f040 8208 	bne.w	80045ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2319      	movs	r3, #25
 80041b0:	2201      	movs	r2, #1
 80041b2:	497b      	ldr	r1, [pc, #492]	; (80043a0 <HAL_I2C_Mem_Read+0x224>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fb85 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	e1fb      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_I2C_Mem_Read+0x56>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e1f4      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d007      	beq.n	80041f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004206:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2222      	movs	r2, #34	; 0x22
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a5b      	ldr	r2, [pc, #364]	; (80043a4 <HAL_I2C_Mem_Read+0x228>)
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800423a:	88f8      	ldrh	r0, [r7, #6]
 800423c:	893a      	ldrh	r2, [r7, #8]
 800423e:	8979      	ldrh	r1, [r7, #10]
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4603      	mov	r3, r0
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa52 	bl	80046f4 <I2C_RequestMemoryRead>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1b0      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d113      	bne.n	800428a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	623b      	str	r3, [r7, #32]
 8004276:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e184      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	2b01      	cmp	r3, #1
 8004290:	d11b      	bne.n	80042ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e164      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d11b      	bne.n	800430a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	e144      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004320:	e138      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b03      	cmp	r3, #3
 8004328:	f200 80f1 	bhi.w	800450e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b01      	cmp	r3, #1
 8004332:	d123      	bne.n	800437c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fc1b 	bl	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e139      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437a:	e10b      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	2b02      	cmp	r3, #2
 8004382:	d14e      	bne.n	8004422 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	2200      	movs	r2, #0
 800438c:	4906      	ldr	r1, [pc, #24]	; (80043a8 <HAL_I2C_Mem_Read+0x22c>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fa98 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e10e      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
 800439e:	bf00      	nop
 80043a0:	00100002 	.word	0x00100002
 80043a4:	ffff0000 	.word	0xffff0000
 80043a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004420:	e0b8      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	2200      	movs	r2, #0
 800442a:	4966      	ldr	r1, [pc, #408]	; (80045c4 <HAL_I2C_Mem_Read+0x448>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fa49 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0bf      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2200      	movs	r2, #0
 8004486:	494f      	ldr	r1, [pc, #316]	; (80045c4 <HAL_I2C_Mem_Read+0x448>)
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fa1b 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e091      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800450c:	e042      	b.n	8004594 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004510:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fb2e 	bl	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e04c      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d118      	bne.n	8004594 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f aec2 	bne.w	8004322 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e000      	b.n	80045bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	; 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	00010004 	.word	0x00010004

080045c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	461a      	mov	r2, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	817b      	strh	r3, [r7, #10]
 80045da:	460b      	mov	r3, r1
 80045dc:	813b      	strh	r3, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f960 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004618:	d103      	bne.n	8004622 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004620:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e05f      	b.n	80046e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004626:	897b      	ldrh	r3, [r7, #10]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	492d      	ldr	r1, [pc, #180]	; (80046f0 <I2C_RequestMemoryWrite+0x128>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f998 	bl	8004972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e04c      	b.n	80046e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	6a39      	ldr	r1, [r7, #32]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fa02 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b04      	cmp	r3, #4
 8004678:	d107      	bne.n	800468a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e02b      	b.n	80046e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	611a      	str	r2, [r3, #16]
 800469e:	e021      	b.n	80046e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f9dc 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d107      	bne.n	80046d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e005      	b.n	80046e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046da:	893b      	ldrh	r3, [r7, #8]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	00010002 	.word	0x00010002

080046f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	461a      	mov	r2, r3
 8004702:	4603      	mov	r3, r0
 8004704:	817b      	strh	r3, [r7, #10]
 8004706:	460b      	mov	r3, r1
 8004708:	813b      	strh	r3, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800471c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	2200      	movs	r2, #0
 8004736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f8c2 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	d103      	bne.n	800475e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0aa      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	6a3a      	ldr	r2, [r7, #32]
 8004776:	4952      	ldr	r1, [pc, #328]	; (80048c0 <I2C_RequestMemoryRead+0x1cc>)
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f8fa 	bl	8004972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e097      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a0:	6a39      	ldr	r1, [r7, #32]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f964 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d107      	bne.n	80047c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e076      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d0:	893b      	ldrh	r3, [r7, #8]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	611a      	str	r2, [r3, #16]
 80047da:	e021      	b.n	8004820 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047dc:	893b      	ldrh	r3, [r7, #8]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ec:	6a39      	ldr	r1, [r7, #32]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f93e 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d107      	bne.n	8004812 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e050      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004816:	893b      	ldrh	r3, [r7, #8]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	6a39      	ldr	r1, [r7, #32]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f923 	bl	8004a70 <I2C_WaitOnTXEFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b04      	cmp	r3, #4
 8004836:	d107      	bne.n	8004848 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004846:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e035      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2200      	movs	r2, #0
 8004864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f82b 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004882:	d103      	bne.n	800488c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e013      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004890:	897b      	ldrh	r3, [r7, #10]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	6a3a      	ldr	r2, [r7, #32]
 80048a4:	4906      	ldr	r1, [pc, #24]	; (80048c0 <I2C_RequestMemoryRead+0x1cc>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f863 	bl	8004972 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	00010002 	.word	0x00010002

080048c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d4:	e025      	b.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d021      	beq.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fd ff79 	bl	80027d4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d116      	bne.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e023      	b.n	800496a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10d      	bne.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x84>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	43da      	mvns	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	e00c      	b.n	8004962 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	43da      	mvns	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d0b6      	beq.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004980:	e051      	b.n	8004a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d123      	bne.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f043 0204 	orr.w	r2, r3, #4
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e046      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d021      	beq.n	8004a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fd fef7 	bl	80027d4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d116      	bne.n	8004a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e020      	b.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10c      	bne.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	43da      	mvns	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf14      	ite	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2300      	moveq	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	e00b      	b.n	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	43da      	mvns	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d18d      	bne.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a7c:	e02d      	b.n	8004ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f8ce 	bl	8004c20 <I2C_IsAcknowledgeFailed>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e02d      	b.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d021      	beq.n	8004ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fd fe9d 	bl	80027d4 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d116      	bne.n	8004ada <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f043 0220 	orr.w	r2, r3, #32
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e007      	b.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d1ca      	bne.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afe:	e02d      	b.n	8004b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f88d 	bl	8004c20 <I2C_IsAcknowledgeFailed>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e02d      	b.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d021      	beq.n	8004b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b18:	f7fd fe5c 	bl	80027d4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d116      	bne.n	8004b5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d1ca      	bne.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b80:	e042      	b.n	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d119      	bne.n	8004bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0210 	mvn.w	r2, #16
 8004b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e029      	b.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7fd fe06 	bl	80027d4 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d116      	bne.n	8004c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e007      	b.n	8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d1b5      	bne.n	8004b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	d11b      	bne.n	8004c70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f043 0204 	orr.w	r2, r3, #4
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e267      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d075      	beq.n	8004d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c9e:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004caa:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d112      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b82      	ldr	r3, [pc, #520]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc2:	d10b      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	4b7e      	ldr	r3, [pc, #504]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05b      	beq.n	8004d88 <HAL_RCC_OscConfig+0x108>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d157      	bne.n	8004d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e242      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x74>
 8004ce6:	4b76      	ldr	r3, [pc, #472]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e01d      	b.n	8004d30 <HAL_RCC_OscConfig+0xb0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x98>
 8004cfe:	4b70      	ldr	r3, [pc, #448]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6f      	ldr	r2, [pc, #444]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	4b6d      	ldr	r3, [pc, #436]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6c      	ldr	r2, [pc, #432]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0xb0>
 8004d18:	4b69      	ldr	r3, [pc, #420]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a68      	ldr	r2, [pc, #416]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	4b66      	ldr	r3, [pc, #408]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a65      	ldr	r2, [pc, #404]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d013      	beq.n	8004d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fd fd4c 	bl	80027d4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fd fd48 	bl	80027d4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e207      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0xc0>
 8004d5e:	e014      	b.n	8004d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fd fd38 	bl	80027d4 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fd fd34 	bl	80027d4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e1f3      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0xe8>
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d063      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d96:	4b4a      	ldr	r3, [pc, #296]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da2:	4b47      	ldr	r3, [pc, #284]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d11c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b44      	ldr	r3, [pc, #272]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d116      	bne.n	8004de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x152>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e1c7      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4937      	ldr	r1, [pc, #220]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	e03a      	b.n	8004e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d020      	beq.n	8004e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df0:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <HAL_RCC_OscConfig+0x244>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df6:	f7fd fced 	bl	80027d4 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dfe:	f7fd fce9 	bl	80027d4 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e1a8      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1c:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4925      	ldr	r1, [pc, #148]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
 8004e30:	e015      	b.n	8004e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCC_OscConfig+0x244>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fd fccc 	bl	80027d4 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e40:	f7fd fcc8 	bl	80027d4 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e187      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d036      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <HAL_RCC_OscConfig+0x248>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fd fcac 	bl	80027d4 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e80:	f7fd fca8 	bl	80027d4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e167      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x200>
 8004e9e:	e01b      	b.n	8004ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCC_OscConfig+0x248>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fc95 	bl	80027d4 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eac:	e00e      	b.n	8004ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fd fc91 	bl	80027d4 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d907      	bls.n	8004ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e150      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	42470000 	.word	0x42470000
 8004ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ea      	bne.n	8004eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8097 	beq.w	8005014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eea:	4b81      	ldr	r3, [pc, #516]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	4b7d      	ldr	r3, [pc, #500]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a7c      	ldr	r2, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b7a      	ldr	r3, [pc, #488]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f16:	4b77      	ldr	r3, [pc, #476]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d118      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f22:	4b74      	ldr	r3, [pc, #464]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a73      	ldr	r2, [pc, #460]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2e:	f7fd fc51 	bl	80027d4 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f36:	f7fd fc4d 	bl	80027d4 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e10c      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d106      	bne.n	8004f6a <HAL_RCC_OscConfig+0x2ea>
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
 8004f68:	e01c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x324>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x30c>
 8004f72:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a5e      	ldr	r2, [pc, #376]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f78:	f043 0304 	orr.w	r3, r3, #4
 8004f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7e:	4b5c      	ldr	r3, [pc, #368]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a5b      	ldr	r2, [pc, #364]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x324>
 8004f8c:	4b58      	ldr	r3, [pc, #352]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	6713      	str	r3, [r2, #112]	; 0x70
 8004f98:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a54      	ldr	r2, [pc, #336]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0304 	bic.w	r3, r3, #4
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fd fc12 	bl	80027d4 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fd fc0e 	bl	80027d4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0cb      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ee      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x334>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fbfc 	bl	80027d4 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe0:	f7fd fbf8 	bl	80027d4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0b5      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff6:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1ee      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005008:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 800500e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80a1 	beq.w	8005160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b08      	cmp	r3, #8
 8005028:	d05c      	beq.n	80050e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d141      	bne.n	80050b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <HAL_RCC_OscConfig+0x478>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fd fbcc 	bl	80027d4 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005040:	f7fd fbc8 	bl	80027d4 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e087      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	3b01      	subs	r3, #1
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	061b      	lsls	r3, r3, #24
 8005082:	491b      	ldr	r1, [pc, #108]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x478>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fd fba1 	bl	80027d4 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005096:	f7fd fb9d 	bl	80027d4 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e05c      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x416>
 80050b4:	e054      	b.n	8005160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_OscConfig+0x478>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fd fb8a 	bl	80027d4 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fd fb86 	bl	80027d4 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e045      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x444>
 80050e2:	e03d      	b.n	8005160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e038      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <HAL_RCC_OscConfig+0x4ec>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d028      	beq.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d121      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11a      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800

08005170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0cc      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b68      	ldr	r3, [pc, #416]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d90c      	bls.n	80051ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b65      	ldr	r3, [pc, #404]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b63      	ldr	r3, [pc, #396]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0b8      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d020      	beq.n	80051fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051c4:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051dc:	4b53      	ldr	r3, [pc, #332]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a52      	ldr	r2, [pc, #328]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	494d      	ldr	r1, [pc, #308]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d044      	beq.n	8005290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d119      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e07f      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d003      	beq.n	800522e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	2b03      	cmp	r3, #3
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b3f      	ldr	r3, [pc, #252]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e06f      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b3b      	ldr	r3, [pc, #236]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e067      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b37      	ldr	r3, [pc, #220]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4934      	ldr	r1, [pc, #208]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005260:	f7fd fab8 	bl	80027d4 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fd fab4 	bl	80027d4 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e04f      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 020c 	and.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1eb      	bne.n	8005268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20c      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e032      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4916      	ldr	r1, [pc, #88]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	490e      	ldr	r1, [pc, #56]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052f6:	f000 f821 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490a      	ldr	r1, [pc, #40]	; (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fa18 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40023c00 	.word	0x40023c00
 800532c:	40023800 	.word	0x40023800
 8005330:	08008910 	.word	0x08008910
 8005334:	20000090 	.word	0x20000090
 8005338:	20000094 	.word	0x20000094

0800533c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800533c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005340:	b090      	sub	sp, #64	; 0x40
 8005342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
 8005348:	2300      	movs	r3, #0
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800534c:	2300      	movs	r3, #0
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005354:	4b59      	ldr	r3, [pc, #356]	; (80054bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b08      	cmp	r3, #8
 800535e:	d00d      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x40>
 8005360:	2b08      	cmp	r3, #8
 8005362:	f200 80a1 	bhi.w	80054a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x34>
 800536a:	2b04      	cmp	r3, #4
 800536c:	d003      	beq.n	8005376 <HAL_RCC_GetSysClockFreq+0x3a>
 800536e:	e09b      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005370:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005374:	e09b      	b.n	80054ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005376:	4b53      	ldr	r3, [pc, #332]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005378:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800537a:	e098      	b.n	80054ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800537c:	4b4f      	ldr	r3, [pc, #316]	; (80054bc <HAL_RCC_GetSysClockFreq+0x180>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005386:	4b4d      	ldr	r3, [pc, #308]	; (80054bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d028      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005392:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	2200      	movs	r2, #0
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	627a      	str	r2, [r7, #36]	; 0x24
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053a4:	2100      	movs	r1, #0
 80053a6:	4b47      	ldr	r3, [pc, #284]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80053a8:	fb03 f201 	mul.w	r2, r3, r1
 80053ac:	2300      	movs	r3, #0
 80053ae:	fb00 f303 	mul.w	r3, r0, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	4a43      	ldr	r2, [pc, #268]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b6:	fba0 1202 	umull	r1, r2, r0, r2
 80053ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053bc:	460a      	mov	r2, r1
 80053be:	62ba      	str	r2, [r7, #40]	; 0x28
 80053c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c2:	4413      	add	r3, r2
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	2200      	movs	r2, #0
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053d6:	f7fb fc37 	bl	8000c48 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4613      	mov	r3, r2
 80053e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e2:	e053      	b.n	800548c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e4:	4b35      	ldr	r3, [pc, #212]	; (80054bc <HAL_RCC_GetSysClockFreq+0x180>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	099b      	lsrs	r3, r3, #6
 80053ea:	2200      	movs	r2, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	617a      	str	r2, [r7, #20]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053f6:	f04f 0b00 	mov.w	fp, #0
 80053fa:	4652      	mov	r2, sl
 80053fc:	465b      	mov	r3, fp
 80053fe:	f04f 0000 	mov.w	r0, #0
 8005402:	f04f 0100 	mov.w	r1, #0
 8005406:	0159      	lsls	r1, r3, #5
 8005408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800540c:	0150      	lsls	r0, r2, #5
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	ebb2 080a 	subs.w	r8, r2, sl
 8005416:	eb63 090b 	sbc.w	r9, r3, fp
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800542a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800542e:	ebb2 0408 	subs.w	r4, r2, r8
 8005432:	eb63 0509 	sbc.w	r5, r3, r9
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	00eb      	lsls	r3, r5, #3
 8005440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005444:	00e2      	lsls	r2, r4, #3
 8005446:	4614      	mov	r4, r2
 8005448:	461d      	mov	r5, r3
 800544a:	eb14 030a 	adds.w	r3, r4, sl
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	eb45 030b 	adc.w	r3, r5, fp
 8005454:	607b      	str	r3, [r7, #4]
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005462:	4629      	mov	r1, r5
 8005464:	028b      	lsls	r3, r1, #10
 8005466:	4621      	mov	r1, r4
 8005468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800546c:	4621      	mov	r1, r4
 800546e:	028a      	lsls	r2, r1, #10
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	2200      	movs	r2, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	60fa      	str	r2, [r7, #12]
 800547c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005480:	f7fb fbe2 	bl	8000c48 <__aeabi_uldivmod>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4613      	mov	r3, r2
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_GetSysClockFreq+0x180>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	3301      	adds	r3, #1
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800549c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054a6:	e002      	b.n	80054ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3740      	adds	r7, #64	; 0x40
 80054b4:	46bd      	mov	sp, r7
 80054b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ba:	bf00      	nop
 80054bc:	40023800 	.word	0x40023800
 80054c0:	00f42400 	.word	0x00f42400
 80054c4:	017d7840 	.word	0x017d7840

080054c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054cc:	4b03      	ldr	r3, [pc, #12]	; (80054dc <HAL_RCC_GetHCLKFreq+0x14>)
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20000090 	.word	0x20000090

080054e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054e4:	f7ff fff0 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	0a9b      	lsrs	r3, r3, #10
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4903      	ldr	r1, [pc, #12]	; (8005504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f6:	5ccb      	ldrb	r3, [r1, r3]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40023800 	.word	0x40023800
 8005504:	08008920 	.word	0x08008920

08005508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800550c:	f7ff ffdc 	bl	80054c8 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0b5b      	lsrs	r3, r3, #13
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	; (800552c <HAL_RCC_GetPCLK2Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	08008920 	.word	0x08008920

08005530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e041      	b.n	80055c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc ff1a 	bl	8002390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f000 f9a0 	bl	80058b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_TIM_PWM_Start+0x24>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	bf14      	ite	ne
 80055ec:	2301      	movne	r3, #1
 80055ee:	2300      	moveq	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e022      	b.n	800563a <HAL_TIM_PWM_Start+0x6a>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d109      	bne.n	800560e <HAL_TIM_PWM_Start+0x3e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e015      	b.n	800563a <HAL_TIM_PWM_Start+0x6a>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d109      	bne.n	8005628 <HAL_TIM_PWM_Start+0x58>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	e008      	b.n	800563a <HAL_TIM_PWM_Start+0x6a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e068      	b.n	8005714 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start+0x82>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005650:	e013      	b.n	800567a <HAL_TIM_PWM_Start+0xaa>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d104      	bne.n	8005662 <HAL_TIM_PWM_Start+0x92>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005660:	e00b      	b.n	800567a <HAL_TIM_PWM_Start+0xaa>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005670:	e003      	b.n	800567a <HAL_TIM_PWM_Start+0xaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb22 	bl	8005ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a23      	ldr	r2, [pc, #140]	; (800571c <HAL_TIM_PWM_Start+0x14c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d107      	bne.n	80056a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_TIM_PWM_Start+0x14c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_TIM_PWM_Start+0x10e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d013      	beq.n	80056de <HAL_TIM_PWM_Start+0x10e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a19      	ldr	r2, [pc, #100]	; (8005720 <HAL_TIM_PWM_Start+0x150>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIM_PWM_Start+0x10e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a17      	ldr	r2, [pc, #92]	; (8005724 <HAL_TIM_PWM_Start+0x154>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_TIM_PWM_Start+0x10e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a16      	ldr	r2, [pc, #88]	; (8005728 <HAL_TIM_PWM_Start+0x158>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIM_PWM_Start+0x10e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a14      	ldr	r2, [pc, #80]	; (800572c <HAL_TIM_PWM_Start+0x15c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d111      	bne.n	8005702 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b06      	cmp	r3, #6
 80056ee:	d010      	beq.n	8005712 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	e007      	b.n	8005712 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40014000 	.word	0x40014000

08005730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800574a:	2302      	movs	r3, #2
 800574c:	e0ae      	b.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b0c      	cmp	r3, #12
 800575a:	f200 809f 	bhi.w	800589c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	08005799 	.word	0x08005799
 8005768:	0800589d 	.word	0x0800589d
 800576c:	0800589d 	.word	0x0800589d
 8005770:	0800589d 	.word	0x0800589d
 8005774:	080057d9 	.word	0x080057d9
 8005778:	0800589d 	.word	0x0800589d
 800577c:	0800589d 	.word	0x0800589d
 8005780:	0800589d 	.word	0x0800589d
 8005784:	0800581b 	.word	0x0800581b
 8005788:	0800589d 	.word	0x0800589d
 800578c:	0800589d 	.word	0x0800589d
 8005790:	0800589d 	.word	0x0800589d
 8005794:	0800585b 	.word	0x0800585b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f908 	bl	80059b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6999      	ldr	r1, [r3, #24]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
      break;
 80057d6:	e064      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f94e 	bl	8005a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	619a      	str	r2, [r3, #24]
      break;
 8005818:	e043      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 f999 	bl	8005b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0208 	orr.w	r2, r2, #8
 8005834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0204 	bic.w	r2, r2, #4
 8005844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69d9      	ldr	r1, [r3, #28]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	61da      	str	r2, [r3, #28]
      break;
 8005858:	e023      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f9e3 	bl	8005c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	021a      	lsls	r2, r3, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	61da      	str	r2, [r3, #28]
      break;
 800589a:	e002      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
      break;
 80058a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a34      	ldr	r2, [pc, #208]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a31      	ldr	r2, [pc, #196]	; (800599c <TIM_Base_SetConfig+0xe8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a30      	ldr	r2, [pc, #192]	; (80059a0 <TIM_Base_SetConfig+0xec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a2f      	ldr	r2, [pc, #188]	; (80059a4 <TIM_Base_SetConfig+0xf0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <TIM_Base_SetConfig+0xe8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <TIM_Base_SetConfig+0xec>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <TIM_Base_SetConfig+0xf0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <TIM_Base_SetConfig+0xf4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <TIM_Base_SetConfig+0xf8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <TIM_Base_SetConfig+0xfc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a08      	ldr	r2, [pc, #32]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800

080059b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0302 	bic.w	r3, r3, #2
 80059fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <TIM_OC1_SetConfig+0xc8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0308 	bic.w	r3, r3, #8
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <TIM_OC1_SetConfig+0xc8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d111      	bne.n	8005a56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40010000 	.word	0x40010000

08005a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0210 	bic.w	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0320 	bic.w	r3, r3, #32
 8005aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <TIM_OC2_SetConfig+0xd4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10d      	bne.n	8005afc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC2_SetConfig+0xd4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000

08005b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <TIM_OC3_SetConfig+0xd0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10d      	bne.n	8005bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <TIM_OC3_SetConfig+0xd0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d113      	bne.n	8005c02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40010000 	.word	0x40010000

08005c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	031b      	lsls	r3, r3, #12
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <TIM_OC4_SetConfig+0x9c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d109      	bne.n	8005ca0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	621a      	str	r2, [r3, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000

08005ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	43db      	mvns	r3, r3
 8005cee:	401a      	ands	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e050      	b.n	8005dd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7c:	d013      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a15      	ldr	r2, [pc, #84]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d10c      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40014000 	.word	0x40014000

08005df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e03d      	b.n	8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03f      	b.n	8005f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc fb72 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	; 0x24
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fddf 	bl	8006aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b08a      	sub	sp, #40	; 0x28
 8005f36:	af02      	add	r7, sp, #8
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d17c      	bne.n	800604c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_Transmit+0x2c>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e075      	b.n	800604e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_UART_Transmit+0x3e>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e06e      	b.n	800604e <HAL_UART_Transmit+0x11c>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2221      	movs	r2, #33	; 0x21
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f86:	f7fc fc25 	bl	80027d4 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa0:	d108      	bne.n	8005fb4 <HAL_UART_Transmit+0x82>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fc4:	e02a      	b.n	800601c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fb1f 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e036      	b.n	800604e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e007      	b.n	800600e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1cf      	bne.n	8005fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	2140      	movs	r1, #64	; 0x40
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 faef 	bl	8006614 <UART_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e006      	b.n	800604e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b20      	cmp	r3, #32
 800606e:	d11d      	bne.n	80060ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_UART_Receive_IT+0x26>
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e016      	b.n	80060ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UART_Receive_IT+0x38>
 800608a:	2302      	movs	r3, #2
 800608c:	e00f      	b.n	80060ae <HAL_UART_Receive_IT+0x58>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	461a      	mov	r2, r3
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fb24 	bl	80066f0 <UART_Start_Receive_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e000      	b.n	80060ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b0ba      	sub	sp, #232	; 0xe8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10f      	bne.n	800611e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_UART_IRQHandler+0x66>
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fc07 	bl	800692a <UART_Receive_IT>
      return;
 800611c:	e256      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800611e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80de 	beq.w	80062e4 <HAL_UART_IRQHandler+0x22c>
 8006128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006138:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80d1 	beq.w	80062e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <HAL_UART_IRQHandler+0xae>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f043 0201 	orr.w	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_UART_IRQHandler+0xd2>
 8006172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <HAL_UART_IRQHandler+0xf6>
 8006196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d011      	beq.n	80061de <HAL_UART_IRQHandler+0x126>
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0208 	orr.w	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 81ed 	beq.w	80065c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_UART_IRQHandler+0x14e>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb92 	bl	800692a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <HAL_UART_IRQHandler+0x17a>
 800622a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d04f      	beq.n	80062d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa9a 	bl	800676c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d141      	bne.n	80062ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3314      	adds	r3, #20
 800624c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800625c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006272:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800627e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800628a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1d9      	bne.n	8006246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	2b00      	cmp	r3, #0
 8006298:	d013      	beq.n	80062c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	4a7d      	ldr	r2, [pc, #500]	; (8006494 <HAL_UART_IRQHandler+0x3dc>)
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd f91a 	bl	80034e0 <HAL_DMA_Abort_IT>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00e      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f990 	bl	80065e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e00a      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f98c 	bl	80065e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e006      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f988 	bl	80065e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062de:	e170      	b.n	80065c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	bf00      	nop
    return;
 80062e2:	e16e      	b.n	80065c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 814a 	bne.w	8006582 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8143 	beq.w	8006582 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 813c 	beq.w	8006582 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b40      	cmp	r3, #64	; 0x40
 800632c:	f040 80b4 	bne.w	8006498 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800633c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8140 	beq.w	80065c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800634e:	429a      	cmp	r2, r3
 8006350:	f080 8139 	bcs.w	80065c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800635a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006366:	f000 8088 	beq.w	800647a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1d9      	bne.n	800636a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e1      	bne.n	80063b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006418:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800641c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e3      	bne.n	80063f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800645c:	65ba      	str	r2, [r7, #88]	; 0x58
 800645e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	4618      	mov	r0, r3
 8006476:	f7fc ffc3 	bl	8003400 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006482:	b29b      	uxth	r3, r3
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	b29b      	uxth	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f8b6 	bl	80065fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006490:	e099      	b.n	80065c6 <HAL_UART_IRQHandler+0x50e>
 8006492:	bf00      	nop
 8006494:	08006833 	.word	0x08006833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 808b 	beq.w	80065ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8086 	beq.w	80065ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	330c      	adds	r3, #12
 80064de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064e2:	647a      	str	r2, [r7, #68]	; 0x44
 80064e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ea:	e841 2300 	strex	r3, r2, [r1]
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e3      	bne.n	80064be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3314      	adds	r3, #20
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	623b      	str	r3, [r7, #32]
   return(result);
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800651a:	633a      	str	r2, [r7, #48]	; 0x30
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e3      	bne.n	80064f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	60fb      	str	r3, [r7, #12]
   return(result);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0310 	bic.w	r3, r3, #16
 8006552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006560:	61fa      	str	r2, [r7, #28]
 8006562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	69b9      	ldr	r1, [r7, #24]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	617b      	str	r3, [r7, #20]
   return(result);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e3      	bne.n	800653c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f83e 	bl	80065fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006580:	e023      	b.n	80065ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_UART_IRQHandler+0x4ea>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f95d 	bl	800685a <UART_Transmit_IT>
    return;
 80065a0:	e014      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00e      	beq.n	80065cc <HAL_UART_IRQHandler+0x514>
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d008      	beq.n	80065cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f99d 	bl	80068fa <UART_EndTransmit_IT>
    return;
 80065c0:	e004      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
    return;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
      return;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
      return;
 80065ca:	bf00      	nop
  }
}
 80065cc:	37e8      	adds	r7, #232	; 0xe8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop

080065d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b090      	sub	sp, #64	; 0x40
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006624:	e050      	b.n	80066c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d04c      	beq.n	80066c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800662e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <UART_WaitOnFlagUntilTimeout+0x30>
 8006634:	f7fc f8ce 	bl	80027d4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006640:	429a      	cmp	r2, r3
 8006642:	d241      	bcs.n	80066c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006664:	637a      	str	r2, [r7, #52]	; 0x34
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800666a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e5      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	613b      	str	r3, [r7, #16]
   return(result);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3314      	adds	r3, #20
 8006696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006698:	623a      	str	r2, [r7, #32]
 800669a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	69f9      	ldr	r1, [r7, #28]
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e5      	bne.n	8006678 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e00f      	b.n	80066e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d09f      	beq.n	8006626 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3740      	adds	r7, #64	; 0x40
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	88fa      	ldrh	r2, [r7, #6]
 800670e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2222      	movs	r2, #34	; 0x22
 800671a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800673c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0220 	orr.w	r2, r2, #32
 800675c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b095      	sub	sp, #84	; 0x54
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006794:	643a      	str	r2, [r7, #64]	; 0x40
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800679a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3314      	adds	r3, #20
 80067ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d119      	bne.n	8006818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f023 0310 	bic.w	r3, r3, #16
 80067fa:	647b      	str	r3, [r7, #68]	; 0x44
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006804:	61ba      	str	r2, [r7, #24]
 8006806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6979      	ldr	r1, [r7, #20]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	613b      	str	r3, [r7, #16]
   return(result);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e5      	bne.n	80067e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006826:	bf00      	nop
 8006828:	3754      	adds	r7, #84	; 0x54
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fecb 	bl	80065e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b21      	cmp	r3, #33	; 0x21
 800686c:	d13e      	bne.n	80068ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d114      	bne.n	80068a2 <UART_Transmit_IT+0x48>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d110      	bne.n	80068a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	621a      	str	r2, [r3, #32]
 80068a0:	e008      	b.n	80068b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6211      	str	r1, [r2, #32]
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29b      	uxth	r3, r3
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4619      	mov	r1, r3
 80068c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10f      	bne.n	80068e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e000      	b.n	80068ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
  }
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fe5a 	bl	80065d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b08c      	sub	sp, #48	; 0x30
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b22      	cmp	r3, #34	; 0x22
 800693c:	f040 80ab 	bne.w	8006a96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006948:	d117      	bne.n	800697a <UART_Receive_IT+0x50>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d113      	bne.n	800697a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006968:	b29a      	uxth	r2, r3
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	1c9a      	adds	r2, r3, #2
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	629a      	str	r2, [r3, #40]	; 0x28
 8006978:	e026      	b.n	80069c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698c:	d007      	beq.n	800699e <UART_Receive_IT+0x74>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <UART_Receive_IT+0x82>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	e008      	b.n	80069be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4619      	mov	r1, r3
 80069d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d15a      	bne.n	8006a92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0220 	bic.w	r2, r2, #32
 80069ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695a      	ldr	r2, [r3, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0201 	bic.w	r2, r2, #1
 8006a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d135      	bne.n	8006a88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	613b      	str	r3, [r7, #16]
   return(result);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f023 0310 	bic.w	r3, r3, #16
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	623a      	str	r2, [r7, #32]
 8006a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	69f9      	ldr	r1, [r7, #28]
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e5      	bne.n	8006a22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d10a      	bne.n	8006a7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fdbb 	bl	80065fc <HAL_UARTEx_RxEventCallback>
 8006a86:	e002      	b.n	8006a8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fa fe89 	bl	80017a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e002      	b.n	8006a98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3730      	adds	r7, #48	; 0x30
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa4:	b0c0      	sub	sp, #256	; 0x100
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	68d9      	ldr	r1, [r3, #12]
 8006abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	ea40 0301 	orr.w	r3, r0, r1
 8006ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006af8:	f021 010c 	bic.w	r1, r1, #12
 8006afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b06:	430b      	orrs	r3, r1
 8006b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1a:	6999      	ldr	r1, [r3, #24]
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	ea40 0301 	orr.w	r3, r0, r1
 8006b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b8f      	ldr	r3, [pc, #572]	; (8006d6c <UART_SetConfig+0x2cc>)
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d005      	beq.n	8006b40 <UART_SetConfig+0xa0>
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b8d      	ldr	r3, [pc, #564]	; (8006d70 <UART_SetConfig+0x2d0>)
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d104      	bne.n	8006b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b40:	f7fe fce2 	bl	8005508 <HAL_RCC_GetPCLK2Freq>
 8006b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b48:	e003      	b.n	8006b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b4a:	f7fe fcc9 	bl	80054e0 <HAL_RCC_GetPCLK1Freq>
 8006b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b5c:	f040 810c 	bne.w	8006d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b72:	4622      	mov	r2, r4
 8006b74:	462b      	mov	r3, r5
 8006b76:	1891      	adds	r1, r2, r2
 8006b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b7a:	415b      	adcs	r3, r3
 8006b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b82:	4621      	mov	r1, r4
 8006b84:	eb12 0801 	adds.w	r8, r2, r1
 8006b88:	4629      	mov	r1, r5
 8006b8a:	eb43 0901 	adc.w	r9, r3, r1
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ba2:	4690      	mov	r8, r2
 8006ba4:	4699      	mov	r9, r3
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	eb18 0303 	adds.w	r3, r8, r3
 8006bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	eb49 0303 	adc.w	r3, r9, r3
 8006bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bce:	460b      	mov	r3, r1
 8006bd0:	18db      	adds	r3, r3, r3
 8006bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	eb42 0303 	adc.w	r3, r2, r3
 8006bda:	657b      	str	r3, [r7, #84]	; 0x54
 8006bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006be4:	f7fa f830 	bl	8000c48 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <UART_SetConfig+0x2d4>)
 8006bee:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	011c      	lsls	r4, r3, #4
 8006bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	1891      	adds	r1, r2, r2
 8006c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c10:	415b      	adcs	r3, r3
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c18:	4641      	mov	r1, r8
 8006c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c1e:	4649      	mov	r1, r9
 8006c20:	eb43 0b01 	adc.w	fp, r3, r1
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c38:	4692      	mov	sl, r2
 8006c3a:	469b      	mov	fp, r3
 8006c3c:	4643      	mov	r3, r8
 8006c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c46:	464b      	mov	r3, r9
 8006c48:	eb4b 0303 	adc.w	r3, fp, r3
 8006c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c64:	460b      	mov	r3, r1
 8006c66:	18db      	adds	r3, r3, r3
 8006c68:	643b      	str	r3, [r7, #64]	; 0x40
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	eb42 0303 	adc.w	r3, r2, r3
 8006c70:	647b      	str	r3, [r7, #68]	; 0x44
 8006c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c7a:	f7f9 ffe5 	bl	8000c48 <__aeabi_uldivmod>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	4b3b      	ldr	r3, [pc, #236]	; (8006d74 <UART_SetConfig+0x2d4>)
 8006c86:	fba3 2301 	umull	r2, r3, r3, r1
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2264      	movs	r2, #100	; 0x64
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	1acb      	subs	r3, r1, r3
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c9a:	4b36      	ldr	r3, [pc, #216]	; (8006d74 <UART_SetConfig+0x2d4>)
 8006c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ca8:	441c      	add	r4, r3
 8006caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	1891      	adds	r1, r2, r2
 8006cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cc4:	415b      	adcs	r3, r3
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ccc:	4641      	mov	r1, r8
 8006cce:	1851      	adds	r1, r2, r1
 8006cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	414b      	adcs	r3, r1
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	00cb      	lsls	r3, r1, #3
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cee:	4651      	mov	r1, sl
 8006cf0:	00ca      	lsls	r2, r1, #3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d00:	464b      	mov	r3, r9
 8006d02:	460a      	mov	r2, r1
 8006d04:	eb42 0303 	adc.w	r3, r2, r3
 8006d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d20:	460b      	mov	r3, r1
 8006d22:	18db      	adds	r3, r3, r3
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d26:	4613      	mov	r3, r2
 8006d28:	eb42 0303 	adc.w	r3, r2, r3
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d36:	f7f9 ff87 	bl	8000c48 <__aeabi_uldivmod>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <UART_SetConfig+0x2d4>)
 8006d40:	fba3 1302 	umull	r1, r3, r3, r2
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	2164      	movs	r1, #100	; 0x64
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	3332      	adds	r3, #50	; 0x32
 8006d52:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <UART_SetConfig+0x2d4>)
 8006d54:	fba2 2303 	umull	r2, r3, r2, r3
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	f003 0207 	and.w	r2, r3, #7
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4422      	add	r2, r4
 8006d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d68:	e105      	b.n	8006f76 <UART_SetConfig+0x4d6>
 8006d6a:	bf00      	nop
 8006d6c:	40011000 	.word	0x40011000
 8006d70:	40011400 	.word	0x40011400
 8006d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	1891      	adds	r1, r2, r2
 8006d90:	6239      	str	r1, [r7, #32]
 8006d92:	415b      	adcs	r3, r3
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
 8006d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	1854      	adds	r4, r2, r1
 8006d9e:	4649      	mov	r1, r9
 8006da0:	eb43 0501 	adc.w	r5, r3, r1
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	00eb      	lsls	r3, r5, #3
 8006dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006db2:	00e2      	lsls	r2, r4, #3
 8006db4:	4614      	mov	r4, r2
 8006db6:	461d      	mov	r5, r3
 8006db8:	4643      	mov	r3, r8
 8006dba:	18e3      	adds	r3, r4, r3
 8006dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dc0:	464b      	mov	r3, r9
 8006dc2:	eb45 0303 	adc.w	r3, r5, r3
 8006dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006de6:	4629      	mov	r1, r5
 8006de8:	008b      	lsls	r3, r1, #2
 8006dea:	4621      	mov	r1, r4
 8006dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006df0:	4621      	mov	r1, r4
 8006df2:	008a      	lsls	r2, r1, #2
 8006df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006df8:	f7f9 ff26 	bl	8000c48 <__aeabi_uldivmod>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4b60      	ldr	r3, [pc, #384]	; (8006f84 <UART_SetConfig+0x4e4>)
 8006e02:	fba3 2302 	umull	r2, r3, r3, r2
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	011c      	lsls	r4, r3, #4
 8006e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	1891      	adds	r1, r2, r2
 8006e22:	61b9      	str	r1, [r7, #24]
 8006e24:	415b      	adcs	r3, r3
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	1851      	adds	r1, r2, r1
 8006e30:	6139      	str	r1, [r7, #16]
 8006e32:	4649      	mov	r1, r9
 8006e34:	414b      	adcs	r3, r1
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e44:	4659      	mov	r1, fp
 8006e46:	00cb      	lsls	r3, r1, #3
 8006e48:	4651      	mov	r1, sl
 8006e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4e:	4651      	mov	r1, sl
 8006e50:	00ca      	lsls	r2, r1, #3
 8006e52:	4610      	mov	r0, r2
 8006e54:	4619      	mov	r1, r3
 8006e56:	4603      	mov	r3, r0
 8006e58:	4642      	mov	r2, r8
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e60:	464b      	mov	r3, r9
 8006e62:	460a      	mov	r2, r1
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e84:	4649      	mov	r1, r9
 8006e86:	008b      	lsls	r3, r1, #2
 8006e88:	4641      	mov	r1, r8
 8006e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8e:	4641      	mov	r1, r8
 8006e90:	008a      	lsls	r2, r1, #2
 8006e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e96:	f7f9 fed7 	bl	8000c48 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4b39      	ldr	r3, [pc, #228]	; (8006f84 <UART_SetConfig+0x4e4>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	; 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	3332      	adds	r3, #50	; 0x32
 8006eb2:	4a34      	ldr	r2, [pc, #208]	; (8006f84 <UART_SetConfig+0x4e4>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ebe:	441c      	add	r4, r3
 8006ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ec8:	677a      	str	r2, [r7, #116]	; 0x74
 8006eca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ece:	4642      	mov	r2, r8
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	1891      	adds	r1, r2, r2
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ede:	4641      	mov	r1, r8
 8006ee0:	1851      	adds	r1, r2, r1
 8006ee2:	6039      	str	r1, [r7, #0]
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	414b      	adcs	r3, r1
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ef6:	4659      	mov	r1, fp
 8006ef8:	00cb      	lsls	r3, r1, #3
 8006efa:	4651      	mov	r1, sl
 8006efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f00:	4651      	mov	r1, sl
 8006f02:	00ca      	lsls	r2, r1, #3
 8006f04:	4610      	mov	r0, r2
 8006f06:	4619      	mov	r1, r3
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4642      	mov	r2, r8
 8006f0c:	189b      	adds	r3, r3, r2
 8006f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f10:	464b      	mov	r3, r9
 8006f12:	460a      	mov	r2, r1
 8006f14:	eb42 0303 	adc.w	r3, r2, r3
 8006f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	663b      	str	r3, [r7, #96]	; 0x60
 8006f24:	667a      	str	r2, [r7, #100]	; 0x64
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f32:	4649      	mov	r1, r9
 8006f34:	008b      	lsls	r3, r1, #2
 8006f36:	4641      	mov	r1, r8
 8006f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	008a      	lsls	r2, r1, #2
 8006f40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f44:	f7f9 fe80 	bl	8000c48 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <UART_SetConfig+0x4e4>)
 8006f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	2164      	movs	r1, #100	; 0x64
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	3332      	adds	r3, #50	; 0x32
 8006f60:	4a08      	ldr	r2, [pc, #32]	; (8006f84 <UART_SetConfig+0x4e4>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4422      	add	r2, r4
 8006f74:	609a      	str	r2, [r3, #8]
}
 8006f76:	bf00      	nop
 8006f78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f82:	bf00      	nop
 8006f84:	51eb851f 	.word	0x51eb851f

08006f88 <__errno>:
 8006f88:	4b01      	ldr	r3, [pc, #4]	; (8006f90 <__errno+0x8>)
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	2000009c 	.word	0x2000009c

08006f94 <__libc_init_array>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	4d0d      	ldr	r5, [pc, #52]	; (8006fcc <__libc_init_array+0x38>)
 8006f98:	4c0d      	ldr	r4, [pc, #52]	; (8006fd0 <__libc_init_array+0x3c>)
 8006f9a:	1b64      	subs	r4, r4, r5
 8006f9c:	10a4      	asrs	r4, r4, #2
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	42a6      	cmp	r6, r4
 8006fa2:	d109      	bne.n	8006fb8 <__libc_init_array+0x24>
 8006fa4:	4d0b      	ldr	r5, [pc, #44]	; (8006fd4 <__libc_init_array+0x40>)
 8006fa6:	4c0c      	ldr	r4, [pc, #48]	; (8006fd8 <__libc_init_array+0x44>)
 8006fa8:	f001 fc82 	bl	80088b0 <_init>
 8006fac:	1b64      	subs	r4, r4, r5
 8006fae:	10a4      	asrs	r4, r4, #2
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	42a6      	cmp	r6, r4
 8006fb4:	d105      	bne.n	8006fc2 <__libc_init_array+0x2e>
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbc:	4798      	blx	r3
 8006fbe:	3601      	adds	r6, #1
 8006fc0:	e7ee      	b.n	8006fa0 <__libc_init_array+0xc>
 8006fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc6:	4798      	blx	r3
 8006fc8:	3601      	adds	r6, #1
 8006fca:	e7f2      	b.n	8006fb2 <__libc_init_array+0x1e>
 8006fcc:	08008a78 	.word	0x08008a78
 8006fd0:	08008a78 	.word	0x08008a78
 8006fd4:	08008a78 	.word	0x08008a78
 8006fd8:	08008a7c 	.word	0x08008a7c

08006fdc <memset>:
 8006fdc:	4402      	add	r2, r0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d100      	bne.n	8006fe6 <memset+0xa>
 8006fe4:	4770      	bx	lr
 8006fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fea:	e7f9      	b.n	8006fe0 <memset+0x4>

08006fec <iprintf>:
 8006fec:	b40f      	push	{r0, r1, r2, r3}
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <iprintf+0x2c>)
 8006ff0:	b513      	push	{r0, r1, r4, lr}
 8006ff2:	681c      	ldr	r4, [r3, #0]
 8006ff4:	b124      	cbz	r4, 8007000 <iprintf+0x14>
 8006ff6:	69a3      	ldr	r3, [r4, #24]
 8006ff8:	b913      	cbnz	r3, 8007000 <iprintf+0x14>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 f866 	bl	80070cc <__sinit>
 8007000:	ab05      	add	r3, sp, #20
 8007002:	9a04      	ldr	r2, [sp, #16]
 8007004:	68a1      	ldr	r1, [r4, #8]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	4620      	mov	r0, r4
 800700a:	f000 f9bd 	bl	8007388 <_vfiprintf_r>
 800700e:	b002      	add	sp, #8
 8007010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007014:	b004      	add	sp, #16
 8007016:	4770      	bx	lr
 8007018:	2000009c 	.word	0x2000009c

0800701c <std>:
 800701c:	2300      	movs	r3, #0
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	e9c0 3300 	strd	r3, r3, [r0]
 8007026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702a:	6083      	str	r3, [r0, #8]
 800702c:	8181      	strh	r1, [r0, #12]
 800702e:	6643      	str	r3, [r0, #100]	; 0x64
 8007030:	81c2      	strh	r2, [r0, #14]
 8007032:	6183      	str	r3, [r0, #24]
 8007034:	4619      	mov	r1, r3
 8007036:	2208      	movs	r2, #8
 8007038:	305c      	adds	r0, #92	; 0x5c
 800703a:	f7ff ffcf 	bl	8006fdc <memset>
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <std+0x38>)
 8007040:	6263      	str	r3, [r4, #36]	; 0x24
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <std+0x3c>)
 8007044:	62a3      	str	r3, [r4, #40]	; 0x28
 8007046:	4b05      	ldr	r3, [pc, #20]	; (800705c <std+0x40>)
 8007048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800704a:	4b05      	ldr	r3, [pc, #20]	; (8007060 <std+0x44>)
 800704c:	6224      	str	r4, [r4, #32]
 800704e:	6323      	str	r3, [r4, #48]	; 0x30
 8007050:	bd10      	pop	{r4, pc}
 8007052:	bf00      	nop
 8007054:	08007931 	.word	0x08007931
 8007058:	08007953 	.word	0x08007953
 800705c:	0800798b 	.word	0x0800798b
 8007060:	080079af 	.word	0x080079af

08007064 <_cleanup_r>:
 8007064:	4901      	ldr	r1, [pc, #4]	; (800706c <_cleanup_r+0x8>)
 8007066:	f000 b8af 	b.w	80071c8 <_fwalk_reent>
 800706a:	bf00      	nop
 800706c:	08007c89 	.word	0x08007c89

08007070 <__sfmoreglue>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	2268      	movs	r2, #104	; 0x68
 8007074:	1e4d      	subs	r5, r1, #1
 8007076:	4355      	muls	r5, r2
 8007078:	460e      	mov	r6, r1
 800707a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800707e:	f000 f8e5 	bl	800724c <_malloc_r>
 8007082:	4604      	mov	r4, r0
 8007084:	b140      	cbz	r0, 8007098 <__sfmoreglue+0x28>
 8007086:	2100      	movs	r1, #0
 8007088:	e9c0 1600 	strd	r1, r6, [r0]
 800708c:	300c      	adds	r0, #12
 800708e:	60a0      	str	r0, [r4, #8]
 8007090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007094:	f7ff ffa2 	bl	8006fdc <memset>
 8007098:	4620      	mov	r0, r4
 800709a:	bd70      	pop	{r4, r5, r6, pc}

0800709c <__sfp_lock_acquire>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__sfp_lock_acquire+0x8>)
 800709e:	f000 b8b3 	b.w	8007208 <__retarget_lock_acquire_recursive>
 80070a2:	bf00      	nop
 80070a4:	200003c5 	.word	0x200003c5

080070a8 <__sfp_lock_release>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__sfp_lock_release+0x8>)
 80070aa:	f000 b8ae 	b.w	800720a <__retarget_lock_release_recursive>
 80070ae:	bf00      	nop
 80070b0:	200003c5 	.word	0x200003c5

080070b4 <__sinit_lock_acquire>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__sinit_lock_acquire+0x8>)
 80070b6:	f000 b8a7 	b.w	8007208 <__retarget_lock_acquire_recursive>
 80070ba:	bf00      	nop
 80070bc:	200003c6 	.word	0x200003c6

080070c0 <__sinit_lock_release>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__sinit_lock_release+0x8>)
 80070c2:	f000 b8a2 	b.w	800720a <__retarget_lock_release_recursive>
 80070c6:	bf00      	nop
 80070c8:	200003c6 	.word	0x200003c6

080070cc <__sinit>:
 80070cc:	b510      	push	{r4, lr}
 80070ce:	4604      	mov	r4, r0
 80070d0:	f7ff fff0 	bl	80070b4 <__sinit_lock_acquire>
 80070d4:	69a3      	ldr	r3, [r4, #24]
 80070d6:	b11b      	cbz	r3, 80070e0 <__sinit+0x14>
 80070d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070dc:	f7ff bff0 	b.w	80070c0 <__sinit_lock_release>
 80070e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070e4:	6523      	str	r3, [r4, #80]	; 0x50
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <__sinit+0x68>)
 80070e8:	4a13      	ldr	r2, [pc, #76]	; (8007138 <__sinit+0x6c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	bf04      	itt	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	61a3      	streq	r3, [r4, #24]
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 f820 	bl	800713c <__sfp>
 80070fc:	6060      	str	r0, [r4, #4]
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f81c 	bl	800713c <__sfp>
 8007104:	60a0      	str	r0, [r4, #8]
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f818 	bl	800713c <__sfp>
 800710c:	2200      	movs	r2, #0
 800710e:	60e0      	str	r0, [r4, #12]
 8007110:	2104      	movs	r1, #4
 8007112:	6860      	ldr	r0, [r4, #4]
 8007114:	f7ff ff82 	bl	800701c <std>
 8007118:	68a0      	ldr	r0, [r4, #8]
 800711a:	2201      	movs	r2, #1
 800711c:	2109      	movs	r1, #9
 800711e:	f7ff ff7d 	bl	800701c <std>
 8007122:	68e0      	ldr	r0, [r4, #12]
 8007124:	2202      	movs	r2, #2
 8007126:	2112      	movs	r1, #18
 8007128:	f7ff ff78 	bl	800701c <std>
 800712c:	2301      	movs	r3, #1
 800712e:	61a3      	str	r3, [r4, #24]
 8007130:	e7d2      	b.n	80070d8 <__sinit+0xc>
 8007132:	bf00      	nop
 8007134:	08008930 	.word	0x08008930
 8007138:	08007065 	.word	0x08007065

0800713c <__sfp>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	4607      	mov	r7, r0
 8007140:	f7ff ffac 	bl	800709c <__sfp_lock_acquire>
 8007144:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <__sfp+0x84>)
 8007146:	681e      	ldr	r6, [r3, #0]
 8007148:	69b3      	ldr	r3, [r6, #24]
 800714a:	b913      	cbnz	r3, 8007152 <__sfp+0x16>
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff ffbd 	bl	80070cc <__sinit>
 8007152:	3648      	adds	r6, #72	; 0x48
 8007154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	d503      	bpl.n	8007164 <__sfp+0x28>
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	b30b      	cbz	r3, 80071a4 <__sfp+0x68>
 8007160:	6836      	ldr	r6, [r6, #0]
 8007162:	e7f7      	b.n	8007154 <__sfp+0x18>
 8007164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007168:	b9d5      	cbnz	r5, 80071a0 <__sfp+0x64>
 800716a:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <__sfp+0x88>)
 800716c:	60e3      	str	r3, [r4, #12]
 800716e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007172:	6665      	str	r5, [r4, #100]	; 0x64
 8007174:	f000 f847 	bl	8007206 <__retarget_lock_init_recursive>
 8007178:	f7ff ff96 	bl	80070a8 <__sfp_lock_release>
 800717c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007184:	6025      	str	r5, [r4, #0]
 8007186:	61a5      	str	r5, [r4, #24]
 8007188:	2208      	movs	r2, #8
 800718a:	4629      	mov	r1, r5
 800718c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007190:	f7ff ff24 	bl	8006fdc <memset>
 8007194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800719c:	4620      	mov	r0, r4
 800719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a0:	3468      	adds	r4, #104	; 0x68
 80071a2:	e7d9      	b.n	8007158 <__sfp+0x1c>
 80071a4:	2104      	movs	r1, #4
 80071a6:	4638      	mov	r0, r7
 80071a8:	f7ff ff62 	bl	8007070 <__sfmoreglue>
 80071ac:	4604      	mov	r4, r0
 80071ae:	6030      	str	r0, [r6, #0]
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1d5      	bne.n	8007160 <__sfp+0x24>
 80071b4:	f7ff ff78 	bl	80070a8 <__sfp_lock_release>
 80071b8:	230c      	movs	r3, #12
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	e7ee      	b.n	800719c <__sfp+0x60>
 80071be:	bf00      	nop
 80071c0:	08008930 	.word	0x08008930
 80071c4:	ffff0001 	.word	0xffff0001

080071c8 <_fwalk_reent>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4606      	mov	r6, r0
 80071ce:	4688      	mov	r8, r1
 80071d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071d4:	2700      	movs	r7, #0
 80071d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071da:	f1b9 0901 	subs.w	r9, r9, #1
 80071de:	d505      	bpl.n	80071ec <_fwalk_reent+0x24>
 80071e0:	6824      	ldr	r4, [r4, #0]
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	d1f7      	bne.n	80071d6 <_fwalk_reent+0xe>
 80071e6:	4638      	mov	r0, r7
 80071e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ec:	89ab      	ldrh	r3, [r5, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d907      	bls.n	8007202 <_fwalk_reent+0x3a>
 80071f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f6:	3301      	adds	r3, #1
 80071f8:	d003      	beq.n	8007202 <_fwalk_reent+0x3a>
 80071fa:	4629      	mov	r1, r5
 80071fc:	4630      	mov	r0, r6
 80071fe:	47c0      	blx	r8
 8007200:	4307      	orrs	r7, r0
 8007202:	3568      	adds	r5, #104	; 0x68
 8007204:	e7e9      	b.n	80071da <_fwalk_reent+0x12>

08007206 <__retarget_lock_init_recursive>:
 8007206:	4770      	bx	lr

08007208 <__retarget_lock_acquire_recursive>:
 8007208:	4770      	bx	lr

0800720a <__retarget_lock_release_recursive>:
 800720a:	4770      	bx	lr

0800720c <sbrk_aligned>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	4e0e      	ldr	r6, [pc, #56]	; (8007248 <sbrk_aligned+0x3c>)
 8007210:	460c      	mov	r4, r1
 8007212:	6831      	ldr	r1, [r6, #0]
 8007214:	4605      	mov	r5, r0
 8007216:	b911      	cbnz	r1, 800721e <sbrk_aligned+0x12>
 8007218:	f000 fb7a 	bl	8007910 <_sbrk_r>
 800721c:	6030      	str	r0, [r6, #0]
 800721e:	4621      	mov	r1, r4
 8007220:	4628      	mov	r0, r5
 8007222:	f000 fb75 	bl	8007910 <_sbrk_r>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d00a      	beq.n	8007240 <sbrk_aligned+0x34>
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	f024 0403 	bic.w	r4, r4, #3
 8007230:	42a0      	cmp	r0, r4
 8007232:	d007      	beq.n	8007244 <sbrk_aligned+0x38>
 8007234:	1a21      	subs	r1, r4, r0
 8007236:	4628      	mov	r0, r5
 8007238:	f000 fb6a 	bl	8007910 <_sbrk_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d101      	bne.n	8007244 <sbrk_aligned+0x38>
 8007240:	f04f 34ff 	mov.w	r4, #4294967295
 8007244:	4620      	mov	r0, r4
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	200003cc 	.word	0x200003cc

0800724c <_malloc_r>:
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	1ccd      	adds	r5, r1, #3
 8007252:	f025 0503 	bic.w	r5, r5, #3
 8007256:	3508      	adds	r5, #8
 8007258:	2d0c      	cmp	r5, #12
 800725a:	bf38      	it	cc
 800725c:	250c      	movcc	r5, #12
 800725e:	2d00      	cmp	r5, #0
 8007260:	4607      	mov	r7, r0
 8007262:	db01      	blt.n	8007268 <_malloc_r+0x1c>
 8007264:	42a9      	cmp	r1, r5
 8007266:	d905      	bls.n	8007274 <_malloc_r+0x28>
 8007268:	230c      	movs	r3, #12
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	2600      	movs	r6, #0
 800726e:	4630      	mov	r0, r6
 8007270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007274:	4e2e      	ldr	r6, [pc, #184]	; (8007330 <_malloc_r+0xe4>)
 8007276:	f000 fdbb 	bl	8007df0 <__malloc_lock>
 800727a:	6833      	ldr	r3, [r6, #0]
 800727c:	461c      	mov	r4, r3
 800727e:	bb34      	cbnz	r4, 80072ce <_malloc_r+0x82>
 8007280:	4629      	mov	r1, r5
 8007282:	4638      	mov	r0, r7
 8007284:	f7ff ffc2 	bl	800720c <sbrk_aligned>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	4604      	mov	r4, r0
 800728c:	d14d      	bne.n	800732a <_malloc_r+0xde>
 800728e:	6834      	ldr	r4, [r6, #0]
 8007290:	4626      	mov	r6, r4
 8007292:	2e00      	cmp	r6, #0
 8007294:	d140      	bne.n	8007318 <_malloc_r+0xcc>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	4631      	mov	r1, r6
 800729a:	4638      	mov	r0, r7
 800729c:	eb04 0803 	add.w	r8, r4, r3
 80072a0:	f000 fb36 	bl	8007910 <_sbrk_r>
 80072a4:	4580      	cmp	r8, r0
 80072a6:	d13a      	bne.n	800731e <_malloc_r+0xd2>
 80072a8:	6821      	ldr	r1, [r4, #0]
 80072aa:	3503      	adds	r5, #3
 80072ac:	1a6d      	subs	r5, r5, r1
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	4629      	mov	r1, r5
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff ffa5 	bl	800720c <sbrk_aligned>
 80072c2:	3001      	adds	r0, #1
 80072c4:	d02b      	beq.n	800731e <_malloc_r+0xd2>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	442b      	add	r3, r5
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	e00e      	b.n	80072ec <_malloc_r+0xa0>
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	1b52      	subs	r2, r2, r5
 80072d2:	d41e      	bmi.n	8007312 <_malloc_r+0xc6>
 80072d4:	2a0b      	cmp	r2, #11
 80072d6:	d916      	bls.n	8007306 <_malloc_r+0xba>
 80072d8:	1961      	adds	r1, r4, r5
 80072da:	42a3      	cmp	r3, r4
 80072dc:	6025      	str	r5, [r4, #0]
 80072de:	bf18      	it	ne
 80072e0:	6059      	strne	r1, [r3, #4]
 80072e2:	6863      	ldr	r3, [r4, #4]
 80072e4:	bf08      	it	eq
 80072e6:	6031      	streq	r1, [r6, #0]
 80072e8:	5162      	str	r2, [r4, r5]
 80072ea:	604b      	str	r3, [r1, #4]
 80072ec:	4638      	mov	r0, r7
 80072ee:	f104 060b 	add.w	r6, r4, #11
 80072f2:	f000 fd83 	bl	8007dfc <__malloc_unlock>
 80072f6:	f026 0607 	bic.w	r6, r6, #7
 80072fa:	1d23      	adds	r3, r4, #4
 80072fc:	1af2      	subs	r2, r6, r3
 80072fe:	d0b6      	beq.n	800726e <_malloc_r+0x22>
 8007300:	1b9b      	subs	r3, r3, r6
 8007302:	50a3      	str	r3, [r4, r2]
 8007304:	e7b3      	b.n	800726e <_malloc_r+0x22>
 8007306:	6862      	ldr	r2, [r4, #4]
 8007308:	42a3      	cmp	r3, r4
 800730a:	bf0c      	ite	eq
 800730c:	6032      	streq	r2, [r6, #0]
 800730e:	605a      	strne	r2, [r3, #4]
 8007310:	e7ec      	b.n	80072ec <_malloc_r+0xa0>
 8007312:	4623      	mov	r3, r4
 8007314:	6864      	ldr	r4, [r4, #4]
 8007316:	e7b2      	b.n	800727e <_malloc_r+0x32>
 8007318:	4634      	mov	r4, r6
 800731a:	6876      	ldr	r6, [r6, #4]
 800731c:	e7b9      	b.n	8007292 <_malloc_r+0x46>
 800731e:	230c      	movs	r3, #12
 8007320:	603b      	str	r3, [r7, #0]
 8007322:	4638      	mov	r0, r7
 8007324:	f000 fd6a 	bl	8007dfc <__malloc_unlock>
 8007328:	e7a1      	b.n	800726e <_malloc_r+0x22>
 800732a:	6025      	str	r5, [r4, #0]
 800732c:	e7de      	b.n	80072ec <_malloc_r+0xa0>
 800732e:	bf00      	nop
 8007330:	200003c8 	.word	0x200003c8

08007334 <__sfputc_r>:
 8007334:	6893      	ldr	r3, [r2, #8]
 8007336:	3b01      	subs	r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	b410      	push	{r4}
 800733c:	6093      	str	r3, [r2, #8]
 800733e:	da08      	bge.n	8007352 <__sfputc_r+0x1e>
 8007340:	6994      	ldr	r4, [r2, #24]
 8007342:	42a3      	cmp	r3, r4
 8007344:	db01      	blt.n	800734a <__sfputc_r+0x16>
 8007346:	290a      	cmp	r1, #10
 8007348:	d103      	bne.n	8007352 <__sfputc_r+0x1e>
 800734a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800734e:	f000 bb33 	b.w	80079b8 <__swbuf_r>
 8007352:	6813      	ldr	r3, [r2, #0]
 8007354:	1c58      	adds	r0, r3, #1
 8007356:	6010      	str	r0, [r2, #0]
 8007358:	7019      	strb	r1, [r3, #0]
 800735a:	4608      	mov	r0, r1
 800735c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007360:	4770      	bx	lr

08007362 <__sfputs_r>:
 8007362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007364:	4606      	mov	r6, r0
 8007366:	460f      	mov	r7, r1
 8007368:	4614      	mov	r4, r2
 800736a:	18d5      	adds	r5, r2, r3
 800736c:	42ac      	cmp	r4, r5
 800736e:	d101      	bne.n	8007374 <__sfputs_r+0x12>
 8007370:	2000      	movs	r0, #0
 8007372:	e007      	b.n	8007384 <__sfputs_r+0x22>
 8007374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007378:	463a      	mov	r2, r7
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ffda 	bl	8007334 <__sfputc_r>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d1f3      	bne.n	800736c <__sfputs_r+0xa>
 8007384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007388 <_vfiprintf_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	460d      	mov	r5, r1
 800738e:	b09d      	sub	sp, #116	; 0x74
 8007390:	4614      	mov	r4, r2
 8007392:	4698      	mov	r8, r3
 8007394:	4606      	mov	r6, r0
 8007396:	b118      	cbz	r0, 80073a0 <_vfiprintf_r+0x18>
 8007398:	6983      	ldr	r3, [r0, #24]
 800739a:	b90b      	cbnz	r3, 80073a0 <_vfiprintf_r+0x18>
 800739c:	f7ff fe96 	bl	80070cc <__sinit>
 80073a0:	4b89      	ldr	r3, [pc, #548]	; (80075c8 <_vfiprintf_r+0x240>)
 80073a2:	429d      	cmp	r5, r3
 80073a4:	d11b      	bne.n	80073de <_vfiprintf_r+0x56>
 80073a6:	6875      	ldr	r5, [r6, #4]
 80073a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073aa:	07d9      	lsls	r1, r3, #31
 80073ac:	d405      	bmi.n	80073ba <_vfiprintf_r+0x32>
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	059a      	lsls	r2, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_vfiprintf_r+0x32>
 80073b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b6:	f7ff ff27 	bl	8007208 <__retarget_lock_acquire_recursive>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	071b      	lsls	r3, r3, #28
 80073be:	d501      	bpl.n	80073c4 <_vfiprintf_r+0x3c>
 80073c0:	692b      	ldr	r3, [r5, #16]
 80073c2:	b9eb      	cbnz	r3, 8007400 <_vfiprintf_r+0x78>
 80073c4:	4629      	mov	r1, r5
 80073c6:	4630      	mov	r0, r6
 80073c8:	f000 fb5a 	bl	8007a80 <__swsetup_r>
 80073cc:	b1c0      	cbz	r0, 8007400 <_vfiprintf_r+0x78>
 80073ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d0:	07dc      	lsls	r4, r3, #31
 80073d2:	d50e      	bpl.n	80073f2 <_vfiprintf_r+0x6a>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b01d      	add	sp, #116	; 0x74
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	4b7b      	ldr	r3, [pc, #492]	; (80075cc <_vfiprintf_r+0x244>)
 80073e0:	429d      	cmp	r5, r3
 80073e2:	d101      	bne.n	80073e8 <_vfiprintf_r+0x60>
 80073e4:	68b5      	ldr	r5, [r6, #8]
 80073e6:	e7df      	b.n	80073a8 <_vfiprintf_r+0x20>
 80073e8:	4b79      	ldr	r3, [pc, #484]	; (80075d0 <_vfiprintf_r+0x248>)
 80073ea:	429d      	cmp	r5, r3
 80073ec:	bf08      	it	eq
 80073ee:	68f5      	ldreq	r5, [r6, #12]
 80073f0:	e7da      	b.n	80073a8 <_vfiprintf_r+0x20>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	0598      	lsls	r0, r3, #22
 80073f6:	d4ed      	bmi.n	80073d4 <_vfiprintf_r+0x4c>
 80073f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073fa:	f7ff ff06 	bl	800720a <__retarget_lock_release_recursive>
 80073fe:	e7e9      	b.n	80073d4 <_vfiprintf_r+0x4c>
 8007400:	2300      	movs	r3, #0
 8007402:	9309      	str	r3, [sp, #36]	; 0x24
 8007404:	2320      	movs	r3, #32
 8007406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740a:	f8cd 800c 	str.w	r8, [sp, #12]
 800740e:	2330      	movs	r3, #48	; 0x30
 8007410:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075d4 <_vfiprintf_r+0x24c>
 8007414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007418:	f04f 0901 	mov.w	r9, #1
 800741c:	4623      	mov	r3, r4
 800741e:	469a      	mov	sl, r3
 8007420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007424:	b10a      	cbz	r2, 800742a <_vfiprintf_r+0xa2>
 8007426:	2a25      	cmp	r2, #37	; 0x25
 8007428:	d1f9      	bne.n	800741e <_vfiprintf_r+0x96>
 800742a:	ebba 0b04 	subs.w	fp, sl, r4
 800742e:	d00b      	beq.n	8007448 <_vfiprintf_r+0xc0>
 8007430:	465b      	mov	r3, fp
 8007432:	4622      	mov	r2, r4
 8007434:	4629      	mov	r1, r5
 8007436:	4630      	mov	r0, r6
 8007438:	f7ff ff93 	bl	8007362 <__sfputs_r>
 800743c:	3001      	adds	r0, #1
 800743e:	f000 80aa 	beq.w	8007596 <_vfiprintf_r+0x20e>
 8007442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007444:	445a      	add	r2, fp
 8007446:	9209      	str	r2, [sp, #36]	; 0x24
 8007448:	f89a 3000 	ldrb.w	r3, [sl]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 80a2 	beq.w	8007596 <_vfiprintf_r+0x20e>
 8007452:	2300      	movs	r3, #0
 8007454:	f04f 32ff 	mov.w	r2, #4294967295
 8007458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745c:	f10a 0a01 	add.w	sl, sl, #1
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	9307      	str	r3, [sp, #28]
 8007464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007468:	931a      	str	r3, [sp, #104]	; 0x68
 800746a:	4654      	mov	r4, sl
 800746c:	2205      	movs	r2, #5
 800746e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007472:	4858      	ldr	r0, [pc, #352]	; (80075d4 <_vfiprintf_r+0x24c>)
 8007474:	f7f8 feb4 	bl	80001e0 <memchr>
 8007478:	9a04      	ldr	r2, [sp, #16]
 800747a:	b9d8      	cbnz	r0, 80074b4 <_vfiprintf_r+0x12c>
 800747c:	06d1      	lsls	r1, r2, #27
 800747e:	bf44      	itt	mi
 8007480:	2320      	movmi	r3, #32
 8007482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007486:	0713      	lsls	r3, r2, #28
 8007488:	bf44      	itt	mi
 800748a:	232b      	movmi	r3, #43	; 0x2b
 800748c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007490:	f89a 3000 	ldrb.w	r3, [sl]
 8007494:	2b2a      	cmp	r3, #42	; 0x2a
 8007496:	d015      	beq.n	80074c4 <_vfiprintf_r+0x13c>
 8007498:	9a07      	ldr	r2, [sp, #28]
 800749a:	4654      	mov	r4, sl
 800749c:	2000      	movs	r0, #0
 800749e:	f04f 0c0a 	mov.w	ip, #10
 80074a2:	4621      	mov	r1, r4
 80074a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a8:	3b30      	subs	r3, #48	; 0x30
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d94e      	bls.n	800754c <_vfiprintf_r+0x1c4>
 80074ae:	b1b0      	cbz	r0, 80074de <_vfiprintf_r+0x156>
 80074b0:	9207      	str	r2, [sp, #28]
 80074b2:	e014      	b.n	80074de <_vfiprintf_r+0x156>
 80074b4:	eba0 0308 	sub.w	r3, r0, r8
 80074b8:	fa09 f303 	lsl.w	r3, r9, r3
 80074bc:	4313      	orrs	r3, r2
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	46a2      	mov	sl, r4
 80074c2:	e7d2      	b.n	800746a <_vfiprintf_r+0xe2>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	1d19      	adds	r1, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	9103      	str	r1, [sp, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bfbb      	ittet	lt
 80074d0:	425b      	neglt	r3, r3
 80074d2:	f042 0202 	orrlt.w	r2, r2, #2
 80074d6:	9307      	strge	r3, [sp, #28]
 80074d8:	9307      	strlt	r3, [sp, #28]
 80074da:	bfb8      	it	lt
 80074dc:	9204      	strlt	r2, [sp, #16]
 80074de:	7823      	ldrb	r3, [r4, #0]
 80074e0:	2b2e      	cmp	r3, #46	; 0x2e
 80074e2:	d10c      	bne.n	80074fe <_vfiprintf_r+0x176>
 80074e4:	7863      	ldrb	r3, [r4, #1]
 80074e6:	2b2a      	cmp	r3, #42	; 0x2a
 80074e8:	d135      	bne.n	8007556 <_vfiprintf_r+0x1ce>
 80074ea:	9b03      	ldr	r3, [sp, #12]
 80074ec:	1d1a      	adds	r2, r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	9203      	str	r2, [sp, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfb8      	it	lt
 80074f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80074fa:	3402      	adds	r4, #2
 80074fc:	9305      	str	r3, [sp, #20]
 80074fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075e4 <_vfiprintf_r+0x25c>
 8007502:	7821      	ldrb	r1, [r4, #0]
 8007504:	2203      	movs	r2, #3
 8007506:	4650      	mov	r0, sl
 8007508:	f7f8 fe6a 	bl	80001e0 <memchr>
 800750c:	b140      	cbz	r0, 8007520 <_vfiprintf_r+0x198>
 800750e:	2340      	movs	r3, #64	; 0x40
 8007510:	eba0 000a 	sub.w	r0, r0, sl
 8007514:	fa03 f000 	lsl.w	r0, r3, r0
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	4303      	orrs	r3, r0
 800751c:	3401      	adds	r4, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	482c      	ldr	r0, [pc, #176]	; (80075d8 <_vfiprintf_r+0x250>)
 8007526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800752a:	2206      	movs	r2, #6
 800752c:	f7f8 fe58 	bl	80001e0 <memchr>
 8007530:	2800      	cmp	r0, #0
 8007532:	d03f      	beq.n	80075b4 <_vfiprintf_r+0x22c>
 8007534:	4b29      	ldr	r3, [pc, #164]	; (80075dc <_vfiprintf_r+0x254>)
 8007536:	bb1b      	cbnz	r3, 8007580 <_vfiprintf_r+0x1f8>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	3307      	adds	r3, #7
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	443b      	add	r3, r7
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	e767      	b.n	800741c <_vfiprintf_r+0x94>
 800754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007550:	460c      	mov	r4, r1
 8007552:	2001      	movs	r0, #1
 8007554:	e7a5      	b.n	80074a2 <_vfiprintf_r+0x11a>
 8007556:	2300      	movs	r3, #0
 8007558:	3401      	adds	r4, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	4619      	mov	r1, r3
 800755e:	f04f 0c0a 	mov.w	ip, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007568:	3a30      	subs	r2, #48	; 0x30
 800756a:	2a09      	cmp	r2, #9
 800756c:	d903      	bls.n	8007576 <_vfiprintf_r+0x1ee>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c5      	beq.n	80074fe <_vfiprintf_r+0x176>
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	e7c3      	b.n	80074fe <_vfiprintf_r+0x176>
 8007576:	fb0c 2101 	mla	r1, ip, r1, r2
 800757a:	4604      	mov	r4, r0
 800757c:	2301      	movs	r3, #1
 800757e:	e7f0      	b.n	8007562 <_vfiprintf_r+0x1da>
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <_vfiprintf_r+0x258>)
 8007588:	a904      	add	r1, sp, #16
 800758a:	4630      	mov	r0, r6
 800758c:	f3af 8000 	nop.w
 8007590:	4607      	mov	r7, r0
 8007592:	1c78      	adds	r0, r7, #1
 8007594:	d1d6      	bne.n	8007544 <_vfiprintf_r+0x1bc>
 8007596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007598:	07d9      	lsls	r1, r3, #31
 800759a:	d405      	bmi.n	80075a8 <_vfiprintf_r+0x220>
 800759c:	89ab      	ldrh	r3, [r5, #12]
 800759e:	059a      	lsls	r2, r3, #22
 80075a0:	d402      	bmi.n	80075a8 <_vfiprintf_r+0x220>
 80075a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a4:	f7ff fe31 	bl	800720a <__retarget_lock_release_recursive>
 80075a8:	89ab      	ldrh	r3, [r5, #12]
 80075aa:	065b      	lsls	r3, r3, #25
 80075ac:	f53f af12 	bmi.w	80073d4 <_vfiprintf_r+0x4c>
 80075b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075b2:	e711      	b.n	80073d8 <_vfiprintf_r+0x50>
 80075b4:	ab03      	add	r3, sp, #12
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	462a      	mov	r2, r5
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <_vfiprintf_r+0x258>)
 80075bc:	a904      	add	r1, sp, #16
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 f880 	bl	80076c4 <_printf_i>
 80075c4:	e7e4      	b.n	8007590 <_vfiprintf_r+0x208>
 80075c6:	bf00      	nop
 80075c8:	08008954 	.word	0x08008954
 80075cc:	08008974 	.word	0x08008974
 80075d0:	08008934 	.word	0x08008934
 80075d4:	08008994 	.word	0x08008994
 80075d8:	0800899e 	.word	0x0800899e
 80075dc:	00000000 	.word	0x00000000
 80075e0:	08007363 	.word	0x08007363
 80075e4:	0800899a 	.word	0x0800899a

080075e8 <_printf_common>:
 80075e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ec:	4616      	mov	r6, r2
 80075ee:	4699      	mov	r9, r3
 80075f0:	688a      	ldr	r2, [r1, #8]
 80075f2:	690b      	ldr	r3, [r1, #16]
 80075f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	bfb8      	it	lt
 80075fc:	4613      	movlt	r3, r2
 80075fe:	6033      	str	r3, [r6, #0]
 8007600:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007604:	4607      	mov	r7, r0
 8007606:	460c      	mov	r4, r1
 8007608:	b10a      	cbz	r2, 800760e <_printf_common+0x26>
 800760a:	3301      	adds	r3, #1
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	0699      	lsls	r1, r3, #26
 8007612:	bf42      	ittt	mi
 8007614:	6833      	ldrmi	r3, [r6, #0]
 8007616:	3302      	addmi	r3, #2
 8007618:	6033      	strmi	r3, [r6, #0]
 800761a:	6825      	ldr	r5, [r4, #0]
 800761c:	f015 0506 	ands.w	r5, r5, #6
 8007620:	d106      	bne.n	8007630 <_printf_common+0x48>
 8007622:	f104 0a19 	add.w	sl, r4, #25
 8007626:	68e3      	ldr	r3, [r4, #12]
 8007628:	6832      	ldr	r2, [r6, #0]
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	42ab      	cmp	r3, r5
 800762e:	dc26      	bgt.n	800767e <_printf_common+0x96>
 8007630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007634:	1e13      	subs	r3, r2, #0
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	bf18      	it	ne
 800763a:	2301      	movne	r3, #1
 800763c:	0692      	lsls	r2, r2, #26
 800763e:	d42b      	bmi.n	8007698 <_printf_common+0xb0>
 8007640:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007644:	4649      	mov	r1, r9
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	3001      	adds	r0, #1
 800764c:	d01e      	beq.n	800768c <_printf_common+0xa4>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	68e5      	ldr	r5, [r4, #12]
 8007652:	6832      	ldr	r2, [r6, #0]
 8007654:	f003 0306 	and.w	r3, r3, #6
 8007658:	2b04      	cmp	r3, #4
 800765a:	bf08      	it	eq
 800765c:	1aad      	subeq	r5, r5, r2
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	bf0c      	ite	eq
 8007664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007668:	2500      	movne	r5, #0
 800766a:	4293      	cmp	r3, r2
 800766c:	bfc4      	itt	gt
 800766e:	1a9b      	subgt	r3, r3, r2
 8007670:	18ed      	addgt	r5, r5, r3
 8007672:	2600      	movs	r6, #0
 8007674:	341a      	adds	r4, #26
 8007676:	42b5      	cmp	r5, r6
 8007678:	d11a      	bne.n	80076b0 <_printf_common+0xc8>
 800767a:	2000      	movs	r0, #0
 800767c:	e008      	b.n	8007690 <_printf_common+0xa8>
 800767e:	2301      	movs	r3, #1
 8007680:	4652      	mov	r2, sl
 8007682:	4649      	mov	r1, r9
 8007684:	4638      	mov	r0, r7
 8007686:	47c0      	blx	r8
 8007688:	3001      	adds	r0, #1
 800768a:	d103      	bne.n	8007694 <_printf_common+0xac>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007694:	3501      	adds	r5, #1
 8007696:	e7c6      	b.n	8007626 <_printf_common+0x3e>
 8007698:	18e1      	adds	r1, r4, r3
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	2030      	movs	r0, #48	; 0x30
 800769e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076a2:	4422      	add	r2, r4
 80076a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ac:	3302      	adds	r3, #2
 80076ae:	e7c7      	b.n	8007640 <_printf_common+0x58>
 80076b0:	2301      	movs	r3, #1
 80076b2:	4622      	mov	r2, r4
 80076b4:	4649      	mov	r1, r9
 80076b6:	4638      	mov	r0, r7
 80076b8:	47c0      	blx	r8
 80076ba:	3001      	adds	r0, #1
 80076bc:	d0e6      	beq.n	800768c <_printf_common+0xa4>
 80076be:	3601      	adds	r6, #1
 80076c0:	e7d9      	b.n	8007676 <_printf_common+0x8e>
	...

080076c4 <_printf_i>:
 80076c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	7e0f      	ldrb	r7, [r1, #24]
 80076ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076cc:	2f78      	cmp	r7, #120	; 0x78
 80076ce:	4691      	mov	r9, r2
 80076d0:	4680      	mov	r8, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	469a      	mov	sl, r3
 80076d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076da:	d807      	bhi.n	80076ec <_printf_i+0x28>
 80076dc:	2f62      	cmp	r7, #98	; 0x62
 80076de:	d80a      	bhi.n	80076f6 <_printf_i+0x32>
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	f000 80d8 	beq.w	8007896 <_printf_i+0x1d2>
 80076e6:	2f58      	cmp	r7, #88	; 0x58
 80076e8:	f000 80a3 	beq.w	8007832 <_printf_i+0x16e>
 80076ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076f4:	e03a      	b.n	800776c <_printf_i+0xa8>
 80076f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076fa:	2b15      	cmp	r3, #21
 80076fc:	d8f6      	bhi.n	80076ec <_printf_i+0x28>
 80076fe:	a101      	add	r1, pc, #4	; (adr r1, 8007704 <_printf_i+0x40>)
 8007700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007704:	0800775d 	.word	0x0800775d
 8007708:	08007771 	.word	0x08007771
 800770c:	080076ed 	.word	0x080076ed
 8007710:	080076ed 	.word	0x080076ed
 8007714:	080076ed 	.word	0x080076ed
 8007718:	080076ed 	.word	0x080076ed
 800771c:	08007771 	.word	0x08007771
 8007720:	080076ed 	.word	0x080076ed
 8007724:	080076ed 	.word	0x080076ed
 8007728:	080076ed 	.word	0x080076ed
 800772c:	080076ed 	.word	0x080076ed
 8007730:	0800787d 	.word	0x0800787d
 8007734:	080077a1 	.word	0x080077a1
 8007738:	0800785f 	.word	0x0800785f
 800773c:	080076ed 	.word	0x080076ed
 8007740:	080076ed 	.word	0x080076ed
 8007744:	0800789f 	.word	0x0800789f
 8007748:	080076ed 	.word	0x080076ed
 800774c:	080077a1 	.word	0x080077a1
 8007750:	080076ed 	.word	0x080076ed
 8007754:	080076ed 	.word	0x080076ed
 8007758:	08007867 	.word	0x08007867
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	1d1a      	adds	r2, r3, #4
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	602a      	str	r2, [r5, #0]
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800776c:	2301      	movs	r3, #1
 800776e:	e0a3      	b.n	80078b8 <_printf_i+0x1f4>
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	6829      	ldr	r1, [r5, #0]
 8007774:	0606      	lsls	r6, r0, #24
 8007776:	f101 0304 	add.w	r3, r1, #4
 800777a:	d50a      	bpl.n	8007792 <_printf_i+0xce>
 800777c:	680e      	ldr	r6, [r1, #0]
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	2e00      	cmp	r6, #0
 8007782:	da03      	bge.n	800778c <_printf_i+0xc8>
 8007784:	232d      	movs	r3, #45	; 0x2d
 8007786:	4276      	negs	r6, r6
 8007788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800778c:	485e      	ldr	r0, [pc, #376]	; (8007908 <_printf_i+0x244>)
 800778e:	230a      	movs	r3, #10
 8007790:	e019      	b.n	80077c6 <_printf_i+0x102>
 8007792:	680e      	ldr	r6, [r1, #0]
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	f010 0f40 	tst.w	r0, #64	; 0x40
 800779a:	bf18      	it	ne
 800779c:	b236      	sxthne	r6, r6
 800779e:	e7ef      	b.n	8007780 <_printf_i+0xbc>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	6029      	str	r1, [r5, #0]
 80077a8:	0601      	lsls	r1, r0, #24
 80077aa:	d501      	bpl.n	80077b0 <_printf_i+0xec>
 80077ac:	681e      	ldr	r6, [r3, #0]
 80077ae:	e002      	b.n	80077b6 <_printf_i+0xf2>
 80077b0:	0646      	lsls	r6, r0, #25
 80077b2:	d5fb      	bpl.n	80077ac <_printf_i+0xe8>
 80077b4:	881e      	ldrh	r6, [r3, #0]
 80077b6:	4854      	ldr	r0, [pc, #336]	; (8007908 <_printf_i+0x244>)
 80077b8:	2f6f      	cmp	r7, #111	; 0x6f
 80077ba:	bf0c      	ite	eq
 80077bc:	2308      	moveq	r3, #8
 80077be:	230a      	movne	r3, #10
 80077c0:	2100      	movs	r1, #0
 80077c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077c6:	6865      	ldr	r5, [r4, #4]
 80077c8:	60a5      	str	r5, [r4, #8]
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	bfa2      	ittt	ge
 80077ce:	6821      	ldrge	r1, [r4, #0]
 80077d0:	f021 0104 	bicge.w	r1, r1, #4
 80077d4:	6021      	strge	r1, [r4, #0]
 80077d6:	b90e      	cbnz	r6, 80077dc <_printf_i+0x118>
 80077d8:	2d00      	cmp	r5, #0
 80077da:	d04d      	beq.n	8007878 <_printf_i+0x1b4>
 80077dc:	4615      	mov	r5, r2
 80077de:	fbb6 f1f3 	udiv	r1, r6, r3
 80077e2:	fb03 6711 	mls	r7, r3, r1, r6
 80077e6:	5dc7      	ldrb	r7, [r0, r7]
 80077e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077ec:	4637      	mov	r7, r6
 80077ee:	42bb      	cmp	r3, r7
 80077f0:	460e      	mov	r6, r1
 80077f2:	d9f4      	bls.n	80077de <_printf_i+0x11a>
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	d10b      	bne.n	8007810 <_printf_i+0x14c>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	07de      	lsls	r6, r3, #31
 80077fc:	d508      	bpl.n	8007810 <_printf_i+0x14c>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	6861      	ldr	r1, [r4, #4]
 8007802:	4299      	cmp	r1, r3
 8007804:	bfde      	ittt	le
 8007806:	2330      	movle	r3, #48	; 0x30
 8007808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800780c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007810:	1b52      	subs	r2, r2, r5
 8007812:	6122      	str	r2, [r4, #16]
 8007814:	f8cd a000 	str.w	sl, [sp]
 8007818:	464b      	mov	r3, r9
 800781a:	aa03      	add	r2, sp, #12
 800781c:	4621      	mov	r1, r4
 800781e:	4640      	mov	r0, r8
 8007820:	f7ff fee2 	bl	80075e8 <_printf_common>
 8007824:	3001      	adds	r0, #1
 8007826:	d14c      	bne.n	80078c2 <_printf_i+0x1fe>
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	b004      	add	sp, #16
 800782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007832:	4835      	ldr	r0, [pc, #212]	; (8007908 <_printf_i+0x244>)
 8007834:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007838:	6829      	ldr	r1, [r5, #0]
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007840:	6029      	str	r1, [r5, #0]
 8007842:	061d      	lsls	r5, r3, #24
 8007844:	d514      	bpl.n	8007870 <_printf_i+0x1ac>
 8007846:	07df      	lsls	r7, r3, #31
 8007848:	bf44      	itt	mi
 800784a:	f043 0320 	orrmi.w	r3, r3, #32
 800784e:	6023      	strmi	r3, [r4, #0]
 8007850:	b91e      	cbnz	r6, 800785a <_printf_i+0x196>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	f023 0320 	bic.w	r3, r3, #32
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	2310      	movs	r3, #16
 800785c:	e7b0      	b.n	80077c0 <_printf_i+0xfc>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f043 0320 	orr.w	r3, r3, #32
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	2378      	movs	r3, #120	; 0x78
 8007868:	4828      	ldr	r0, [pc, #160]	; (800790c <_printf_i+0x248>)
 800786a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800786e:	e7e3      	b.n	8007838 <_printf_i+0x174>
 8007870:	0659      	lsls	r1, r3, #25
 8007872:	bf48      	it	mi
 8007874:	b2b6      	uxthmi	r6, r6
 8007876:	e7e6      	b.n	8007846 <_printf_i+0x182>
 8007878:	4615      	mov	r5, r2
 800787a:	e7bb      	b.n	80077f4 <_printf_i+0x130>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	6826      	ldr	r6, [r4, #0]
 8007880:	6961      	ldr	r1, [r4, #20]
 8007882:	1d18      	adds	r0, r3, #4
 8007884:	6028      	str	r0, [r5, #0]
 8007886:	0635      	lsls	r5, r6, #24
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	d501      	bpl.n	8007890 <_printf_i+0x1cc>
 800788c:	6019      	str	r1, [r3, #0]
 800788e:	e002      	b.n	8007896 <_printf_i+0x1d2>
 8007890:	0670      	lsls	r0, r6, #25
 8007892:	d5fb      	bpl.n	800788c <_printf_i+0x1c8>
 8007894:	8019      	strh	r1, [r3, #0]
 8007896:	2300      	movs	r3, #0
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	4615      	mov	r5, r2
 800789c:	e7ba      	b.n	8007814 <_printf_i+0x150>
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	1d1a      	adds	r2, r3, #4
 80078a2:	602a      	str	r2, [r5, #0]
 80078a4:	681d      	ldr	r5, [r3, #0]
 80078a6:	6862      	ldr	r2, [r4, #4]
 80078a8:	2100      	movs	r1, #0
 80078aa:	4628      	mov	r0, r5
 80078ac:	f7f8 fc98 	bl	80001e0 <memchr>
 80078b0:	b108      	cbz	r0, 80078b6 <_printf_i+0x1f2>
 80078b2:	1b40      	subs	r0, r0, r5
 80078b4:	6060      	str	r0, [r4, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	6123      	str	r3, [r4, #16]
 80078ba:	2300      	movs	r3, #0
 80078bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c0:	e7a8      	b.n	8007814 <_printf_i+0x150>
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	462a      	mov	r2, r5
 80078c6:	4649      	mov	r1, r9
 80078c8:	4640      	mov	r0, r8
 80078ca:	47d0      	blx	sl
 80078cc:	3001      	adds	r0, #1
 80078ce:	d0ab      	beq.n	8007828 <_printf_i+0x164>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	079b      	lsls	r3, r3, #30
 80078d4:	d413      	bmi.n	80078fe <_printf_i+0x23a>
 80078d6:	68e0      	ldr	r0, [r4, #12]
 80078d8:	9b03      	ldr	r3, [sp, #12]
 80078da:	4298      	cmp	r0, r3
 80078dc:	bfb8      	it	lt
 80078de:	4618      	movlt	r0, r3
 80078e0:	e7a4      	b.n	800782c <_printf_i+0x168>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4632      	mov	r2, r6
 80078e6:	4649      	mov	r1, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	47d0      	blx	sl
 80078ec:	3001      	adds	r0, #1
 80078ee:	d09b      	beq.n	8007828 <_printf_i+0x164>
 80078f0:	3501      	adds	r5, #1
 80078f2:	68e3      	ldr	r3, [r4, #12]
 80078f4:	9903      	ldr	r1, [sp, #12]
 80078f6:	1a5b      	subs	r3, r3, r1
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	dcf2      	bgt.n	80078e2 <_printf_i+0x21e>
 80078fc:	e7eb      	b.n	80078d6 <_printf_i+0x212>
 80078fe:	2500      	movs	r5, #0
 8007900:	f104 0619 	add.w	r6, r4, #25
 8007904:	e7f5      	b.n	80078f2 <_printf_i+0x22e>
 8007906:	bf00      	nop
 8007908:	080089a5 	.word	0x080089a5
 800790c:	080089b6 	.word	0x080089b6

08007910 <_sbrk_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d06      	ldr	r5, [pc, #24]	; (800792c <_sbrk_r+0x1c>)
 8007914:	2300      	movs	r3, #0
 8007916:	4604      	mov	r4, r0
 8007918:	4608      	mov	r0, r1
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	f7fa fbd2 	bl	80020c4 <_sbrk>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_sbrk_r+0x1a>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_sbrk_r+0x1a>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	200003d0 	.word	0x200003d0

08007930 <__sread>:
 8007930:	b510      	push	{r4, lr}
 8007932:	460c      	mov	r4, r1
 8007934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007938:	f000 fab2 	bl	8007ea0 <_read_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	bfab      	itete	ge
 8007940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007942:	89a3      	ldrhlt	r3, [r4, #12]
 8007944:	181b      	addge	r3, r3, r0
 8007946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800794a:	bfac      	ite	ge
 800794c:	6563      	strge	r3, [r4, #84]	; 0x54
 800794e:	81a3      	strhlt	r3, [r4, #12]
 8007950:	bd10      	pop	{r4, pc}

08007952 <__swrite>:
 8007952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007956:	461f      	mov	r7, r3
 8007958:	898b      	ldrh	r3, [r1, #12]
 800795a:	05db      	lsls	r3, r3, #23
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	4616      	mov	r6, r2
 8007962:	d505      	bpl.n	8007970 <__swrite+0x1e>
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	2302      	movs	r3, #2
 800796a:	2200      	movs	r2, #0
 800796c:	f000 f9c8 	bl	8007d00 <_lseek_r>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	4632      	mov	r2, r6
 800797e:	463b      	mov	r3, r7
 8007980:	4628      	mov	r0, r5
 8007982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007986:	f000 b869 	b.w	8007a5c <_write_r>

0800798a <__sseek>:
 800798a:	b510      	push	{r4, lr}
 800798c:	460c      	mov	r4, r1
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 f9b5 	bl	8007d00 <_lseek_r>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	bf15      	itete	ne
 800799c:	6560      	strne	r0, [r4, #84]	; 0x54
 800799e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079a6:	81a3      	strheq	r3, [r4, #12]
 80079a8:	bf18      	it	ne
 80079aa:	81a3      	strhne	r3, [r4, #12]
 80079ac:	bd10      	pop	{r4, pc}

080079ae <__sclose>:
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f000 b8d3 	b.w	8007b5c <_close_r>
	...

080079b8 <__swbuf_r>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	460e      	mov	r6, r1
 80079bc:	4614      	mov	r4, r2
 80079be:	4605      	mov	r5, r0
 80079c0:	b118      	cbz	r0, 80079ca <__swbuf_r+0x12>
 80079c2:	6983      	ldr	r3, [r0, #24]
 80079c4:	b90b      	cbnz	r3, 80079ca <__swbuf_r+0x12>
 80079c6:	f7ff fb81 	bl	80070cc <__sinit>
 80079ca:	4b21      	ldr	r3, [pc, #132]	; (8007a50 <__swbuf_r+0x98>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d12b      	bne.n	8007a28 <__swbuf_r+0x70>
 80079d0:	686c      	ldr	r4, [r5, #4]
 80079d2:	69a3      	ldr	r3, [r4, #24]
 80079d4:	60a3      	str	r3, [r4, #8]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	071a      	lsls	r2, r3, #28
 80079da:	d52f      	bpl.n	8007a3c <__swbuf_r+0x84>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	b36b      	cbz	r3, 8007a3c <__swbuf_r+0x84>
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	6820      	ldr	r0, [r4, #0]
 80079e4:	1ac0      	subs	r0, r0, r3
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	b2f6      	uxtb	r6, r6
 80079ea:	4283      	cmp	r3, r0
 80079ec:	4637      	mov	r7, r6
 80079ee:	dc04      	bgt.n	80079fa <__swbuf_r+0x42>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f948 	bl	8007c88 <_fflush_r>
 80079f8:	bb30      	cbnz	r0, 8007a48 <__swbuf_r+0x90>
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	6022      	str	r2, [r4, #0]
 8007a06:	701e      	strb	r6, [r3, #0]
 8007a08:	6963      	ldr	r3, [r4, #20]
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	d004      	beq.n	8007a1a <__swbuf_r+0x62>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	07db      	lsls	r3, r3, #31
 8007a14:	d506      	bpl.n	8007a24 <__swbuf_r+0x6c>
 8007a16:	2e0a      	cmp	r6, #10
 8007a18:	d104      	bne.n	8007a24 <__swbuf_r+0x6c>
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 f933 	bl	8007c88 <_fflush_r>
 8007a22:	b988      	cbnz	r0, 8007a48 <__swbuf_r+0x90>
 8007a24:	4638      	mov	r0, r7
 8007a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <__swbuf_r+0x9c>)
 8007a2a:	429c      	cmp	r4, r3
 8007a2c:	d101      	bne.n	8007a32 <__swbuf_r+0x7a>
 8007a2e:	68ac      	ldr	r4, [r5, #8]
 8007a30:	e7cf      	b.n	80079d2 <__swbuf_r+0x1a>
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <__swbuf_r+0xa0>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	bf08      	it	eq
 8007a38:	68ec      	ldreq	r4, [r5, #12]
 8007a3a:	e7ca      	b.n	80079d2 <__swbuf_r+0x1a>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f81e 	bl	8007a80 <__swsetup_r>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d0cb      	beq.n	80079e0 <__swbuf_r+0x28>
 8007a48:	f04f 37ff 	mov.w	r7, #4294967295
 8007a4c:	e7ea      	b.n	8007a24 <__swbuf_r+0x6c>
 8007a4e:	bf00      	nop
 8007a50:	08008954 	.word	0x08008954
 8007a54:	08008974 	.word	0x08008974
 8007a58:	08008934 	.word	0x08008934

08007a5c <_write_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_write_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7fa fad9 	bl	8002022 <_write>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_write_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_write_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	200003d0 	.word	0x200003d0

08007a80 <__swsetup_r>:
 8007a80:	4b32      	ldr	r3, [pc, #200]	; (8007b4c <__swsetup_r+0xcc>)
 8007a82:	b570      	push	{r4, r5, r6, lr}
 8007a84:	681d      	ldr	r5, [r3, #0]
 8007a86:	4606      	mov	r6, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	b125      	cbz	r5, 8007a96 <__swsetup_r+0x16>
 8007a8c:	69ab      	ldr	r3, [r5, #24]
 8007a8e:	b913      	cbnz	r3, 8007a96 <__swsetup_r+0x16>
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7ff fb1b 	bl	80070cc <__sinit>
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <__swsetup_r+0xd0>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d10f      	bne.n	8007abc <__swsetup_r+0x3c>
 8007a9c:	686c      	ldr	r4, [r5, #4]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa4:	0719      	lsls	r1, r3, #28
 8007aa6:	d42c      	bmi.n	8007b02 <__swsetup_r+0x82>
 8007aa8:	06dd      	lsls	r5, r3, #27
 8007aaa:	d411      	bmi.n	8007ad0 <__swsetup_r+0x50>
 8007aac:	2309      	movs	r3, #9
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aba:	e03e      	b.n	8007b3a <__swsetup_r+0xba>
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <__swsetup_r+0xd4>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <__swsetup_r+0x46>
 8007ac2:	68ac      	ldr	r4, [r5, #8]
 8007ac4:	e7eb      	b.n	8007a9e <__swsetup_r+0x1e>
 8007ac6:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <__swsetup_r+0xd8>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	bf08      	it	eq
 8007acc:	68ec      	ldreq	r4, [r5, #12]
 8007ace:	e7e6      	b.n	8007a9e <__swsetup_r+0x1e>
 8007ad0:	0758      	lsls	r0, r3, #29
 8007ad2:	d512      	bpl.n	8007afa <__swsetup_r+0x7a>
 8007ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad6:	b141      	cbz	r1, 8007aea <__swsetup_r+0x6a>
 8007ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d002      	beq.n	8007ae6 <__swsetup_r+0x66>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f000 f991 	bl	8007e08 <_free_r>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	b94b      	cbnz	r3, 8007b1a <__swsetup_r+0x9a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b10:	d003      	beq.n	8007b1a <__swsetup_r+0x9a>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4630      	mov	r0, r6
 8007b16:	f000 f92b 	bl	8007d70 <__smakebuf_r>
 8007b1a:	89a0      	ldrh	r0, [r4, #12]
 8007b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b20:	f010 0301 	ands.w	r3, r0, #1
 8007b24:	d00a      	beq.n	8007b3c <__swsetup_r+0xbc>
 8007b26:	2300      	movs	r3, #0
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	6963      	ldr	r3, [r4, #20]
 8007b2c:	425b      	negs	r3, r3
 8007b2e:	61a3      	str	r3, [r4, #24]
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	b943      	cbnz	r3, 8007b46 <__swsetup_r+0xc6>
 8007b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b38:	d1ba      	bne.n	8007ab0 <__swsetup_r+0x30>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	0781      	lsls	r1, r0, #30
 8007b3e:	bf58      	it	pl
 8007b40:	6963      	ldrpl	r3, [r4, #20]
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	e7f4      	b.n	8007b30 <__swsetup_r+0xb0>
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7f7      	b.n	8007b3a <__swsetup_r+0xba>
 8007b4a:	bf00      	nop
 8007b4c:	2000009c 	.word	0x2000009c
 8007b50:	08008954 	.word	0x08008954
 8007b54:	08008974 	.word	0x08008974
 8007b58:	08008934 	.word	0x08008934

08007b5c <_close_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d06      	ldr	r5, [pc, #24]	; (8007b78 <_close_r+0x1c>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	602b      	str	r3, [r5, #0]
 8007b68:	f7fa fa77 	bl	800205a <_close>
 8007b6c:	1c43      	adds	r3, r0, #1
 8007b6e:	d102      	bne.n	8007b76 <_close_r+0x1a>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_close_r+0x1a>
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	bd38      	pop	{r3, r4, r5, pc}
 8007b78:	200003d0 	.word	0x200003d0

08007b7c <__sflush_r>:
 8007b7c:	898a      	ldrh	r2, [r1, #12]
 8007b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	4605      	mov	r5, r0
 8007b84:	0710      	lsls	r0, r2, #28
 8007b86:	460c      	mov	r4, r1
 8007b88:	d458      	bmi.n	8007c3c <__sflush_r+0xc0>
 8007b8a:	684b      	ldr	r3, [r1, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc05      	bgt.n	8007b9c <__sflush_r+0x20>
 8007b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	dc02      	bgt.n	8007b9c <__sflush_r+0x20>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d0f9      	beq.n	8007b96 <__sflush_r+0x1a>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ba8:	682f      	ldr	r7, [r5, #0]
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	d032      	beq.n	8007c14 <__sflush_r+0x98>
 8007bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	075a      	lsls	r2, r3, #29
 8007bb4:	d505      	bpl.n	8007bc2 <__sflush_r+0x46>
 8007bb6:	6863      	ldr	r3, [r4, #4]
 8007bb8:	1ac0      	subs	r0, r0, r3
 8007bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bbc:	b10b      	cbz	r3, 8007bc2 <__sflush_r+0x46>
 8007bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bc0:	1ac0      	subs	r0, r0, r3
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bc8:	6a21      	ldr	r1, [r4, #32]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47b0      	blx	r6
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	d106      	bne.n	8007be2 <__sflush_r+0x66>
 8007bd4:	6829      	ldr	r1, [r5, #0]
 8007bd6:	291d      	cmp	r1, #29
 8007bd8:	d82c      	bhi.n	8007c34 <__sflush_r+0xb8>
 8007bda:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <__sflush_r+0x108>)
 8007bdc:	40ca      	lsrs	r2, r1
 8007bde:	07d6      	lsls	r6, r2, #31
 8007be0:	d528      	bpl.n	8007c34 <__sflush_r+0xb8>
 8007be2:	2200      	movs	r2, #0
 8007be4:	6062      	str	r2, [r4, #4]
 8007be6:	04d9      	lsls	r1, r3, #19
 8007be8:	6922      	ldr	r2, [r4, #16]
 8007bea:	6022      	str	r2, [r4, #0]
 8007bec:	d504      	bpl.n	8007bf8 <__sflush_r+0x7c>
 8007bee:	1c42      	adds	r2, r0, #1
 8007bf0:	d101      	bne.n	8007bf6 <__sflush_r+0x7a>
 8007bf2:	682b      	ldr	r3, [r5, #0]
 8007bf4:	b903      	cbnz	r3, 8007bf8 <__sflush_r+0x7c>
 8007bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8007bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bfa:	602f      	str	r7, [r5, #0]
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	d0ca      	beq.n	8007b96 <__sflush_r+0x1a>
 8007c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c04:	4299      	cmp	r1, r3
 8007c06:	d002      	beq.n	8007c0e <__sflush_r+0x92>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f8fd 	bl	8007e08 <_free_r>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	6360      	str	r0, [r4, #52]	; 0x34
 8007c12:	e7c1      	b.n	8007b98 <__sflush_r+0x1c>
 8007c14:	6a21      	ldr	r1, [r4, #32]
 8007c16:	2301      	movs	r3, #1
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b0      	blx	r6
 8007c1c:	1c41      	adds	r1, r0, #1
 8007c1e:	d1c7      	bne.n	8007bb0 <__sflush_r+0x34>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0c4      	beq.n	8007bb0 <__sflush_r+0x34>
 8007c26:	2b1d      	cmp	r3, #29
 8007c28:	d001      	beq.n	8007c2e <__sflush_r+0xb2>
 8007c2a:	2b16      	cmp	r3, #22
 8007c2c:	d101      	bne.n	8007c32 <__sflush_r+0xb6>
 8007c2e:	602f      	str	r7, [r5, #0]
 8007c30:	e7b1      	b.n	8007b96 <__sflush_r+0x1a>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	e7ad      	b.n	8007b98 <__sflush_r+0x1c>
 8007c3c:	690f      	ldr	r7, [r1, #16]
 8007c3e:	2f00      	cmp	r7, #0
 8007c40:	d0a9      	beq.n	8007b96 <__sflush_r+0x1a>
 8007c42:	0793      	lsls	r3, r2, #30
 8007c44:	680e      	ldr	r6, [r1, #0]
 8007c46:	bf08      	it	eq
 8007c48:	694b      	ldreq	r3, [r1, #20]
 8007c4a:	600f      	str	r7, [r1, #0]
 8007c4c:	bf18      	it	ne
 8007c4e:	2300      	movne	r3, #0
 8007c50:	eba6 0807 	sub.w	r8, r6, r7
 8007c54:	608b      	str	r3, [r1, #8]
 8007c56:	f1b8 0f00 	cmp.w	r8, #0
 8007c5a:	dd9c      	ble.n	8007b96 <__sflush_r+0x1a>
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c60:	4643      	mov	r3, r8
 8007c62:	463a      	mov	r2, r7
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b0      	blx	r6
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	dc06      	bgt.n	8007c7a <__sflush_r+0xfe>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e78e      	b.n	8007b98 <__sflush_r+0x1c>
 8007c7a:	4407      	add	r7, r0
 8007c7c:	eba8 0800 	sub.w	r8, r8, r0
 8007c80:	e7e9      	b.n	8007c56 <__sflush_r+0xda>
 8007c82:	bf00      	nop
 8007c84:	20400001 	.word	0x20400001

08007c88 <_fflush_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	690b      	ldr	r3, [r1, #16]
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	b913      	cbnz	r3, 8007c98 <_fflush_r+0x10>
 8007c92:	2500      	movs	r5, #0
 8007c94:	4628      	mov	r0, r5
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	b118      	cbz	r0, 8007ca2 <_fflush_r+0x1a>
 8007c9a:	6983      	ldr	r3, [r0, #24]
 8007c9c:	b90b      	cbnz	r3, 8007ca2 <_fflush_r+0x1a>
 8007c9e:	f7ff fa15 	bl	80070cc <__sinit>
 8007ca2:	4b14      	ldr	r3, [pc, #80]	; (8007cf4 <_fflush_r+0x6c>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	d11b      	bne.n	8007ce0 <_fflush_r+0x58>
 8007ca8:	686c      	ldr	r4, [r5, #4]
 8007caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0ef      	beq.n	8007c92 <_fflush_r+0xa>
 8007cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cb4:	07d0      	lsls	r0, r2, #31
 8007cb6:	d404      	bmi.n	8007cc2 <_fflush_r+0x3a>
 8007cb8:	0599      	lsls	r1, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_fflush_r+0x3a>
 8007cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cbe:	f7ff faa3 	bl	8007208 <__retarget_lock_acquire_recursive>
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f7ff ff59 	bl	8007b7c <__sflush_r>
 8007cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ccc:	07da      	lsls	r2, r3, #31
 8007cce:	4605      	mov	r5, r0
 8007cd0:	d4e0      	bmi.n	8007c94 <_fflush_r+0xc>
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	059b      	lsls	r3, r3, #22
 8007cd6:	d4dd      	bmi.n	8007c94 <_fflush_r+0xc>
 8007cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cda:	f7ff fa96 	bl	800720a <__retarget_lock_release_recursive>
 8007cde:	e7d9      	b.n	8007c94 <_fflush_r+0xc>
 8007ce0:	4b05      	ldr	r3, [pc, #20]	; (8007cf8 <_fflush_r+0x70>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	d101      	bne.n	8007cea <_fflush_r+0x62>
 8007ce6:	68ac      	ldr	r4, [r5, #8]
 8007ce8:	e7df      	b.n	8007caa <_fflush_r+0x22>
 8007cea:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <_fflush_r+0x74>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	bf08      	it	eq
 8007cf0:	68ec      	ldreq	r4, [r5, #12]
 8007cf2:	e7da      	b.n	8007caa <_fflush_r+0x22>
 8007cf4:	08008954 	.word	0x08008954
 8007cf8:	08008974 	.word	0x08008974
 8007cfc:	08008934 	.word	0x08008934

08007d00 <_lseek_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	4d07      	ldr	r5, [pc, #28]	; (8007d20 <_lseek_r+0x20>)
 8007d04:	4604      	mov	r4, r0
 8007d06:	4608      	mov	r0, r1
 8007d08:	4611      	mov	r1, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	602a      	str	r2, [r5, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f7fa f9ca 	bl	80020a8 <_lseek>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_lseek_r+0x1e>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_lseek_r+0x1e>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	200003d0 	.word	0x200003d0

08007d24 <__swhatbuf_r>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	460e      	mov	r6, r1
 8007d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	b096      	sub	sp, #88	; 0x58
 8007d30:	4614      	mov	r4, r2
 8007d32:	461d      	mov	r5, r3
 8007d34:	da08      	bge.n	8007d48 <__swhatbuf_r+0x24>
 8007d36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	602a      	str	r2, [r5, #0]
 8007d3e:	061a      	lsls	r2, r3, #24
 8007d40:	d410      	bmi.n	8007d64 <__swhatbuf_r+0x40>
 8007d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d46:	e00e      	b.n	8007d66 <__swhatbuf_r+0x42>
 8007d48:	466a      	mov	r2, sp
 8007d4a:	f000 f8bb 	bl	8007ec4 <_fstat_r>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	dbf1      	blt.n	8007d36 <__swhatbuf_r+0x12>
 8007d52:	9a01      	ldr	r2, [sp, #4]
 8007d54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d5c:	425a      	negs	r2, r3
 8007d5e:	415a      	adcs	r2, r3
 8007d60:	602a      	str	r2, [r5, #0]
 8007d62:	e7ee      	b.n	8007d42 <__swhatbuf_r+0x1e>
 8007d64:	2340      	movs	r3, #64	; 0x40
 8007d66:	2000      	movs	r0, #0
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	b016      	add	sp, #88	; 0x58
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d70 <__smakebuf_r>:
 8007d70:	898b      	ldrh	r3, [r1, #12]
 8007d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d74:	079d      	lsls	r5, r3, #30
 8007d76:	4606      	mov	r6, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	d507      	bpl.n	8007d8c <__smakebuf_r+0x1c>
 8007d7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	2301      	movs	r3, #1
 8007d86:	6163      	str	r3, [r4, #20]
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	ab01      	add	r3, sp, #4
 8007d8e:	466a      	mov	r2, sp
 8007d90:	f7ff ffc8 	bl	8007d24 <__swhatbuf_r>
 8007d94:	9900      	ldr	r1, [sp, #0]
 8007d96:	4605      	mov	r5, r0
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff fa57 	bl	800724c <_malloc_r>
 8007d9e:	b948      	cbnz	r0, 8007db4 <__smakebuf_r+0x44>
 8007da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da4:	059a      	lsls	r2, r3, #22
 8007da6:	d4ef      	bmi.n	8007d88 <__smakebuf_r+0x18>
 8007da8:	f023 0303 	bic.w	r3, r3, #3
 8007dac:	f043 0302 	orr.w	r3, r3, #2
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	e7e3      	b.n	8007d7c <__smakebuf_r+0xc>
 8007db4:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <__smakebuf_r+0x7c>)
 8007db6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	6020      	str	r0, [r4, #0]
 8007dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	9b00      	ldr	r3, [sp, #0]
 8007dc4:	6163      	str	r3, [r4, #20]
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	6120      	str	r0, [r4, #16]
 8007dca:	b15b      	cbz	r3, 8007de4 <__smakebuf_r+0x74>
 8007dcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f889 	bl	8007ee8 <_isatty_r>
 8007dd6:	b128      	cbz	r0, 8007de4 <__smakebuf_r+0x74>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	f043 0301 	orr.w	r3, r3, #1
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	89a0      	ldrh	r0, [r4, #12]
 8007de6:	4305      	orrs	r5, r0
 8007de8:	81a5      	strh	r5, [r4, #12]
 8007dea:	e7cd      	b.n	8007d88 <__smakebuf_r+0x18>
 8007dec:	08007065 	.word	0x08007065

08007df0 <__malloc_lock>:
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__malloc_lock+0x8>)
 8007df2:	f7ff ba09 	b.w	8007208 <__retarget_lock_acquire_recursive>
 8007df6:	bf00      	nop
 8007df8:	200003c4 	.word	0x200003c4

08007dfc <__malloc_unlock>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__malloc_unlock+0x8>)
 8007dfe:	f7ff ba04 	b.w	800720a <__retarget_lock_release_recursive>
 8007e02:	bf00      	nop
 8007e04:	200003c4 	.word	0x200003c4

08007e08 <_free_r>:
 8007e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d044      	beq.n	8007e98 <_free_r+0x90>
 8007e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e12:	9001      	str	r0, [sp, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f1a1 0404 	sub.w	r4, r1, #4
 8007e1a:	bfb8      	it	lt
 8007e1c:	18e4      	addlt	r4, r4, r3
 8007e1e:	f7ff ffe7 	bl	8007df0 <__malloc_lock>
 8007e22:	4a1e      	ldr	r2, [pc, #120]	; (8007e9c <_free_r+0x94>)
 8007e24:	9801      	ldr	r0, [sp, #4]
 8007e26:	6813      	ldr	r3, [r2, #0]
 8007e28:	b933      	cbnz	r3, 8007e38 <_free_r+0x30>
 8007e2a:	6063      	str	r3, [r4, #4]
 8007e2c:	6014      	str	r4, [r2, #0]
 8007e2e:	b003      	add	sp, #12
 8007e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e34:	f7ff bfe2 	b.w	8007dfc <__malloc_unlock>
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	d908      	bls.n	8007e4e <_free_r+0x46>
 8007e3c:	6825      	ldr	r5, [r4, #0]
 8007e3e:	1961      	adds	r1, r4, r5
 8007e40:	428b      	cmp	r3, r1
 8007e42:	bf01      	itttt	eq
 8007e44:	6819      	ldreq	r1, [r3, #0]
 8007e46:	685b      	ldreq	r3, [r3, #4]
 8007e48:	1949      	addeq	r1, r1, r5
 8007e4a:	6021      	streq	r1, [r4, #0]
 8007e4c:	e7ed      	b.n	8007e2a <_free_r+0x22>
 8007e4e:	461a      	mov	r2, r3
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	b10b      	cbz	r3, 8007e58 <_free_r+0x50>
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d9fa      	bls.n	8007e4e <_free_r+0x46>
 8007e58:	6811      	ldr	r1, [r2, #0]
 8007e5a:	1855      	adds	r5, r2, r1
 8007e5c:	42a5      	cmp	r5, r4
 8007e5e:	d10b      	bne.n	8007e78 <_free_r+0x70>
 8007e60:	6824      	ldr	r4, [r4, #0]
 8007e62:	4421      	add	r1, r4
 8007e64:	1854      	adds	r4, r2, r1
 8007e66:	42a3      	cmp	r3, r4
 8007e68:	6011      	str	r1, [r2, #0]
 8007e6a:	d1e0      	bne.n	8007e2e <_free_r+0x26>
 8007e6c:	681c      	ldr	r4, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	6053      	str	r3, [r2, #4]
 8007e72:	4421      	add	r1, r4
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	e7da      	b.n	8007e2e <_free_r+0x26>
 8007e78:	d902      	bls.n	8007e80 <_free_r+0x78>
 8007e7a:	230c      	movs	r3, #12
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	e7d6      	b.n	8007e2e <_free_r+0x26>
 8007e80:	6825      	ldr	r5, [r4, #0]
 8007e82:	1961      	adds	r1, r4, r5
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf04      	itt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	6063      	str	r3, [r4, #4]
 8007e8e:	bf04      	itt	eq
 8007e90:	1949      	addeq	r1, r1, r5
 8007e92:	6021      	streq	r1, [r4, #0]
 8007e94:	6054      	str	r4, [r2, #4]
 8007e96:	e7ca      	b.n	8007e2e <_free_r+0x26>
 8007e98:	b003      	add	sp, #12
 8007e9a:	bd30      	pop	{r4, r5, pc}
 8007e9c:	200003c8 	.word	0x200003c8

08007ea0 <_read_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d07      	ldr	r5, [pc, #28]	; (8007ec0 <_read_r+0x20>)
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	2200      	movs	r2, #0
 8007eac:	602a      	str	r2, [r5, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f7fa f89a 	bl	8001fe8 <_read>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_read_r+0x1e>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_read_r+0x1e>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	200003d0 	.word	0x200003d0

08007ec4 <_fstat_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4d07      	ldr	r5, [pc, #28]	; (8007ee4 <_fstat_r+0x20>)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4604      	mov	r4, r0
 8007ecc:	4608      	mov	r0, r1
 8007ece:	4611      	mov	r1, r2
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	f7fa f8ce 	bl	8002072 <_fstat>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	d102      	bne.n	8007ee0 <_fstat_r+0x1c>
 8007eda:	682b      	ldr	r3, [r5, #0]
 8007edc:	b103      	cbz	r3, 8007ee0 <_fstat_r+0x1c>
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	bd38      	pop	{r3, r4, r5, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200003d0 	.word	0x200003d0

08007ee8 <_isatty_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4d06      	ldr	r5, [pc, #24]	; (8007f04 <_isatty_r+0x1c>)
 8007eec:	2300      	movs	r3, #0
 8007eee:	4604      	mov	r4, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	602b      	str	r3, [r5, #0]
 8007ef4:	f7fa f8cd 	bl	8002092 <_isatty>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_isatty_r+0x1a>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_isatty_r+0x1a>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	200003d0 	.word	0x200003d0

08007f08 <atan>:
 8007f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	ec55 4b10 	vmov	r4, r5, d0
 8007f10:	4bc3      	ldr	r3, [pc, #780]	; (8008220 <atan+0x318>)
 8007f12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f16:	429e      	cmp	r6, r3
 8007f18:	46ab      	mov	fp, r5
 8007f1a:	dd18      	ble.n	8007f4e <atan+0x46>
 8007f1c:	4bc1      	ldr	r3, [pc, #772]	; (8008224 <atan+0x31c>)
 8007f1e:	429e      	cmp	r6, r3
 8007f20:	dc01      	bgt.n	8007f26 <atan+0x1e>
 8007f22:	d109      	bne.n	8007f38 <atan+0x30>
 8007f24:	b144      	cbz	r4, 8007f38 <atan+0x30>
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	f7f8 f9ad 	bl	800028c <__adddf3>
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	e006      	b.n	8007f46 <atan+0x3e>
 8007f38:	f1bb 0f00 	cmp.w	fp, #0
 8007f3c:	f300 8131 	bgt.w	80081a2 <atan+0x29a>
 8007f40:	a59b      	add	r5, pc, #620	; (adr r5, 80081b0 <atan+0x2a8>)
 8007f42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f46:	ec45 4b10 	vmov	d0, r4, r5
 8007f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4e:	4bb6      	ldr	r3, [pc, #728]	; (8008228 <atan+0x320>)
 8007f50:	429e      	cmp	r6, r3
 8007f52:	dc14      	bgt.n	8007f7e <atan+0x76>
 8007f54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007f58:	429e      	cmp	r6, r3
 8007f5a:	dc0d      	bgt.n	8007f78 <atan+0x70>
 8007f5c:	a396      	add	r3, pc, #600	; (adr r3, 80081b8 <atan+0x2b0>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	ee10 0a10 	vmov	r0, s0
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7f8 f990 	bl	800028c <__adddf3>
 8007f6c:	4baf      	ldr	r3, [pc, #700]	; (800822c <atan+0x324>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f7f8 fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1e6      	bne.n	8007f46 <atan+0x3e>
 8007f78:	f04f 3aff 	mov.w	sl, #4294967295
 8007f7c:	e02b      	b.n	8007fd6 <atan+0xce>
 8007f7e:	f000 f963 	bl	8008248 <fabs>
 8007f82:	4bab      	ldr	r3, [pc, #684]	; (8008230 <atan+0x328>)
 8007f84:	429e      	cmp	r6, r3
 8007f86:	ec55 4b10 	vmov	r4, r5, d0
 8007f8a:	f300 80bf 	bgt.w	800810c <atan+0x204>
 8007f8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f92:	429e      	cmp	r6, r3
 8007f94:	f300 80a0 	bgt.w	80080d8 <atan+0x1d0>
 8007f98:	ee10 2a10 	vmov	r2, s0
 8007f9c:	ee10 0a10 	vmov	r0, s0
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 f972 	bl	800028c <__adddf3>
 8007fa8:	4ba0      	ldr	r3, [pc, #640]	; (800822c <atan+0x324>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	f7f8 f96c 	bl	8000288 <__aeabi_dsub>
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 f965 	bl	800028c <__adddf3>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 fc3f 	bl	800084c <__aeabi_ddiv>
 8007fce:	f04f 0a00 	mov.w	sl, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	462b      	mov	r3, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7f8 fb0b 	bl	80005f8 <__aeabi_dmul>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4680      	mov	r8, r0
 8007fe8:	4689      	mov	r9, r1
 8007fea:	f7f8 fb05 	bl	80005f8 <__aeabi_dmul>
 8007fee:	a374      	add	r3, pc, #464	; (adr r3, 80081c0 <atan+0x2b8>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	a372      	add	r3, pc, #456	; (adr r3, 80081c8 <atan+0x2c0>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f943 	bl	800028c <__adddf3>
 8008006:	4632      	mov	r2, r6
 8008008:	463b      	mov	r3, r7
 800800a:	f7f8 faf5 	bl	80005f8 <__aeabi_dmul>
 800800e:	a370      	add	r3, pc, #448	; (adr r3, 80081d0 <atan+0x2c8>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f93a 	bl	800028c <__adddf3>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	f7f8 faec 	bl	80005f8 <__aeabi_dmul>
 8008020:	a36d      	add	r3, pc, #436	; (adr r3, 80081d8 <atan+0x2d0>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f931 	bl	800028c <__adddf3>
 800802a:	4632      	mov	r2, r6
 800802c:	463b      	mov	r3, r7
 800802e:	f7f8 fae3 	bl	80005f8 <__aeabi_dmul>
 8008032:	a36b      	add	r3, pc, #428	; (adr r3, 80081e0 <atan+0x2d8>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 f928 	bl	800028c <__adddf3>
 800803c:	4632      	mov	r2, r6
 800803e:	463b      	mov	r3, r7
 8008040:	f7f8 fada 	bl	80005f8 <__aeabi_dmul>
 8008044:	a368      	add	r3, pc, #416	; (adr r3, 80081e8 <atan+0x2e0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f91f 	bl	800028c <__adddf3>
 800804e:	4642      	mov	r2, r8
 8008050:	464b      	mov	r3, r9
 8008052:	f7f8 fad1 	bl	80005f8 <__aeabi_dmul>
 8008056:	a366      	add	r3, pc, #408	; (adr r3, 80081f0 <atan+0x2e8>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	4630      	mov	r0, r6
 8008062:	4639      	mov	r1, r7
 8008064:	f7f8 fac8 	bl	80005f8 <__aeabi_dmul>
 8008068:	a363      	add	r3, pc, #396	; (adr r3, 80081f8 <atan+0x2f0>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f7f8 f90b 	bl	8000288 <__aeabi_dsub>
 8008072:	4632      	mov	r2, r6
 8008074:	463b      	mov	r3, r7
 8008076:	f7f8 fabf 	bl	80005f8 <__aeabi_dmul>
 800807a:	a361      	add	r3, pc, #388	; (adr r3, 8008200 <atan+0x2f8>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 f902 	bl	8000288 <__aeabi_dsub>
 8008084:	4632      	mov	r2, r6
 8008086:	463b      	mov	r3, r7
 8008088:	f7f8 fab6 	bl	80005f8 <__aeabi_dmul>
 800808c:	a35e      	add	r3, pc, #376	; (adr r3, 8008208 <atan+0x300>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 f8f9 	bl	8000288 <__aeabi_dsub>
 8008096:	4632      	mov	r2, r6
 8008098:	463b      	mov	r3, r7
 800809a:	f7f8 faad 	bl	80005f8 <__aeabi_dmul>
 800809e:	a35c      	add	r3, pc, #368	; (adr r3, 8008210 <atan+0x308>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 f8f0 	bl	8000288 <__aeabi_dsub>
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 f8e8 	bl	800028c <__adddf3>
 80080bc:	4622      	mov	r2, r4
 80080be:	462b      	mov	r3, r5
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	d14b      	bne.n	8008166 <atan+0x25e>
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7f8 f8d9 	bl	8000288 <__aeabi_dsub>
 80080d6:	e72c      	b.n	8007f32 <atan+0x2a>
 80080d8:	ee10 0a10 	vmov	r0, s0
 80080dc:	4b53      	ldr	r3, [pc, #332]	; (800822c <atan+0x324>)
 80080de:	2200      	movs	r2, #0
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 f8d1 	bl	8000288 <__aeabi_dsub>
 80080e6:	4b51      	ldr	r3, [pc, #324]	; (800822c <atan+0x324>)
 80080e8:	4606      	mov	r6, r0
 80080ea:	460f      	mov	r7, r1
 80080ec:	2200      	movs	r2, #0
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 f8cb 	bl	800028c <__adddf3>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4630      	mov	r0, r6
 80080fc:	4639      	mov	r1, r7
 80080fe:	f7f8 fba5 	bl	800084c <__aeabi_ddiv>
 8008102:	f04f 0a01 	mov.w	sl, #1
 8008106:	4604      	mov	r4, r0
 8008108:	460d      	mov	r5, r1
 800810a:	e764      	b.n	8007fd6 <atan+0xce>
 800810c:	4b49      	ldr	r3, [pc, #292]	; (8008234 <atan+0x32c>)
 800810e:	429e      	cmp	r6, r3
 8008110:	da1d      	bge.n	800814e <atan+0x246>
 8008112:	ee10 0a10 	vmov	r0, s0
 8008116:	4b48      	ldr	r3, [pc, #288]	; (8008238 <atan+0x330>)
 8008118:	2200      	movs	r2, #0
 800811a:	4629      	mov	r1, r5
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	4b45      	ldr	r3, [pc, #276]	; (8008238 <atan+0x330>)
 8008122:	4606      	mov	r6, r0
 8008124:	460f      	mov	r7, r1
 8008126:	2200      	movs	r2, #0
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 fa64 	bl	80005f8 <__aeabi_dmul>
 8008130:	4b3e      	ldr	r3, [pc, #248]	; (800822c <atan+0x324>)
 8008132:	2200      	movs	r2, #0
 8008134:	f7f8 f8aa 	bl	800028c <__adddf3>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 fb84 	bl	800084c <__aeabi_ddiv>
 8008144:	f04f 0a02 	mov.w	sl, #2
 8008148:	4604      	mov	r4, r0
 800814a:	460d      	mov	r5, r1
 800814c:	e743      	b.n	8007fd6 <atan+0xce>
 800814e:	462b      	mov	r3, r5
 8008150:	ee10 2a10 	vmov	r2, s0
 8008154:	4939      	ldr	r1, [pc, #228]	; (800823c <atan+0x334>)
 8008156:	2000      	movs	r0, #0
 8008158:	f7f8 fb78 	bl	800084c <__aeabi_ddiv>
 800815c:	f04f 0a03 	mov.w	sl, #3
 8008160:	4604      	mov	r4, r0
 8008162:	460d      	mov	r5, r1
 8008164:	e737      	b.n	8007fd6 <atan+0xce>
 8008166:	4b36      	ldr	r3, [pc, #216]	; (8008240 <atan+0x338>)
 8008168:	4e36      	ldr	r6, [pc, #216]	; (8008244 <atan+0x33c>)
 800816a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800816e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008172:	e9da 2300 	ldrd	r2, r3, [sl]
 8008176:	f7f8 f887 	bl	8000288 <__aeabi_dsub>
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	f7f8 f883 	bl	8000288 <__aeabi_dsub>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	e9d6 0100 	ldrd	r0, r1, [r6]
 800818a:	f7f8 f87d 	bl	8000288 <__aeabi_dsub>
 800818e:	f1bb 0f00 	cmp.w	fp, #0
 8008192:	4604      	mov	r4, r0
 8008194:	460d      	mov	r5, r1
 8008196:	f6bf aed6 	bge.w	8007f46 <atan+0x3e>
 800819a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800819e:	461d      	mov	r5, r3
 80081a0:	e6d1      	b.n	8007f46 <atan+0x3e>
 80081a2:	a51d      	add	r5, pc, #116	; (adr r5, 8008218 <atan+0x310>)
 80081a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081a8:	e6cd      	b.n	8007f46 <atan+0x3e>
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w
 80081b0:	54442d18 	.word	0x54442d18
 80081b4:	bff921fb 	.word	0xbff921fb
 80081b8:	8800759c 	.word	0x8800759c
 80081bc:	7e37e43c 	.word	0x7e37e43c
 80081c0:	e322da11 	.word	0xe322da11
 80081c4:	3f90ad3a 	.word	0x3f90ad3a
 80081c8:	24760deb 	.word	0x24760deb
 80081cc:	3fa97b4b 	.word	0x3fa97b4b
 80081d0:	a0d03d51 	.word	0xa0d03d51
 80081d4:	3fb10d66 	.word	0x3fb10d66
 80081d8:	c54c206e 	.word	0xc54c206e
 80081dc:	3fb745cd 	.word	0x3fb745cd
 80081e0:	920083ff 	.word	0x920083ff
 80081e4:	3fc24924 	.word	0x3fc24924
 80081e8:	5555550d 	.word	0x5555550d
 80081ec:	3fd55555 	.word	0x3fd55555
 80081f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80081f4:	bfa2b444 	.word	0xbfa2b444
 80081f8:	52defd9a 	.word	0x52defd9a
 80081fc:	3fadde2d 	.word	0x3fadde2d
 8008200:	af749a6d 	.word	0xaf749a6d
 8008204:	3fb3b0f2 	.word	0x3fb3b0f2
 8008208:	fe231671 	.word	0xfe231671
 800820c:	3fbc71c6 	.word	0x3fbc71c6
 8008210:	9998ebc4 	.word	0x9998ebc4
 8008214:	3fc99999 	.word	0x3fc99999
 8008218:	54442d18 	.word	0x54442d18
 800821c:	3ff921fb 	.word	0x3ff921fb
 8008220:	440fffff 	.word	0x440fffff
 8008224:	7ff00000 	.word	0x7ff00000
 8008228:	3fdbffff 	.word	0x3fdbffff
 800822c:	3ff00000 	.word	0x3ff00000
 8008230:	3ff2ffff 	.word	0x3ff2ffff
 8008234:	40038000 	.word	0x40038000
 8008238:	3ff80000 	.word	0x3ff80000
 800823c:	bff00000 	.word	0xbff00000
 8008240:	080089e8 	.word	0x080089e8
 8008244:	080089c8 	.word	0x080089c8

08008248 <fabs>:
 8008248:	ec51 0b10 	vmov	r0, r1, d0
 800824c:	ee10 2a10 	vmov	r2, s0
 8008250:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008254:	ec43 2b10 	vmov	d0, r2, r3
 8008258:	4770      	bx	lr

0800825a <atan2>:
 800825a:	f000 b831 	b.w	80082c0 <__ieee754_atan2>

0800825e <sqrt>:
 800825e:	b538      	push	{r3, r4, r5, lr}
 8008260:	ed2d 8b02 	vpush	{d8}
 8008264:	ec55 4b10 	vmov	r4, r5, d0
 8008268:	f000 f8f4 	bl	8008454 <__ieee754_sqrt>
 800826c:	4622      	mov	r2, r4
 800826e:	462b      	mov	r3, r5
 8008270:	4620      	mov	r0, r4
 8008272:	4629      	mov	r1, r5
 8008274:	eeb0 8a40 	vmov.f32	s16, s0
 8008278:	eef0 8a60 	vmov.f32	s17, s1
 800827c:	f7f8 fc56 	bl	8000b2c <__aeabi_dcmpun>
 8008280:	b990      	cbnz	r0, 80082a8 <sqrt+0x4a>
 8008282:	2200      	movs	r2, #0
 8008284:	2300      	movs	r3, #0
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 fc27 	bl	8000adc <__aeabi_dcmplt>
 800828e:	b158      	cbz	r0, 80082a8 <sqrt+0x4a>
 8008290:	f7fe fe7a 	bl	8006f88 <__errno>
 8008294:	2321      	movs	r3, #33	; 0x21
 8008296:	6003      	str	r3, [r0, #0]
 8008298:	2200      	movs	r2, #0
 800829a:	2300      	movs	r3, #0
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	f7f8 fad4 	bl	800084c <__aeabi_ddiv>
 80082a4:	ec41 0b18 	vmov	d8, r0, r1
 80082a8:	eeb0 0a48 	vmov.f32	s0, s16
 80082ac:	eef0 0a68 	vmov.f32	s1, s17
 80082b0:	ecbd 8b02 	vpop	{d8}
 80082b4:	bd38      	pop	{r3, r4, r5, pc}

080082b6 <atan2f>:
 80082b6:	f000 b97f 	b.w	80085b8 <__ieee754_atan2f>
 80082ba:	0000      	movs	r0, r0
 80082bc:	0000      	movs	r0, r0
	...

080082c0 <__ieee754_atan2>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	ec57 6b11 	vmov	r6, r7, d1
 80082c8:	4273      	negs	r3, r6
 80082ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008450 <__ieee754_atan2+0x190>
 80082ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80082d2:	4333      	orrs	r3, r6
 80082d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80082d8:	4573      	cmp	r3, lr
 80082da:	ec51 0b10 	vmov	r0, r1, d0
 80082de:	ee11 8a10 	vmov	r8, s2
 80082e2:	d80a      	bhi.n	80082fa <__ieee754_atan2+0x3a>
 80082e4:	4244      	negs	r4, r0
 80082e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082ea:	4304      	orrs	r4, r0
 80082ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80082f0:	4574      	cmp	r4, lr
 80082f2:	ee10 9a10 	vmov	r9, s0
 80082f6:	468c      	mov	ip, r1
 80082f8:	d907      	bls.n	800830a <__ieee754_atan2+0x4a>
 80082fa:	4632      	mov	r2, r6
 80082fc:	463b      	mov	r3, r7
 80082fe:	f7f7 ffc5 	bl	800028c <__adddf3>
 8008302:	ec41 0b10 	vmov	d0, r0, r1
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800830e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008312:	4334      	orrs	r4, r6
 8008314:	d103      	bne.n	800831e <__ieee754_atan2+0x5e>
 8008316:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831a:	f7ff bdf5 	b.w	8007f08 <atan>
 800831e:	17bc      	asrs	r4, r7, #30
 8008320:	f004 0402 	and.w	r4, r4, #2
 8008324:	ea53 0909 	orrs.w	r9, r3, r9
 8008328:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800832c:	d107      	bne.n	800833e <__ieee754_atan2+0x7e>
 800832e:	2c02      	cmp	r4, #2
 8008330:	d060      	beq.n	80083f4 <__ieee754_atan2+0x134>
 8008332:	2c03      	cmp	r4, #3
 8008334:	d1e5      	bne.n	8008302 <__ieee754_atan2+0x42>
 8008336:	a142      	add	r1, pc, #264	; (adr r1, 8008440 <__ieee754_atan2+0x180>)
 8008338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800833c:	e7e1      	b.n	8008302 <__ieee754_atan2+0x42>
 800833e:	ea52 0808 	orrs.w	r8, r2, r8
 8008342:	d106      	bne.n	8008352 <__ieee754_atan2+0x92>
 8008344:	f1bc 0f00 	cmp.w	ip, #0
 8008348:	da5f      	bge.n	800840a <__ieee754_atan2+0x14a>
 800834a:	a13f      	add	r1, pc, #252	; (adr r1, 8008448 <__ieee754_atan2+0x188>)
 800834c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008350:	e7d7      	b.n	8008302 <__ieee754_atan2+0x42>
 8008352:	4572      	cmp	r2, lr
 8008354:	d10f      	bne.n	8008376 <__ieee754_atan2+0xb6>
 8008356:	4293      	cmp	r3, r2
 8008358:	f104 34ff 	add.w	r4, r4, #4294967295
 800835c:	d107      	bne.n	800836e <__ieee754_atan2+0xae>
 800835e:	2c02      	cmp	r4, #2
 8008360:	d84c      	bhi.n	80083fc <__ieee754_atan2+0x13c>
 8008362:	4b35      	ldr	r3, [pc, #212]	; (8008438 <__ieee754_atan2+0x178>)
 8008364:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008368:	e9d4 0100 	ldrd	r0, r1, [r4]
 800836c:	e7c9      	b.n	8008302 <__ieee754_atan2+0x42>
 800836e:	2c02      	cmp	r4, #2
 8008370:	d848      	bhi.n	8008404 <__ieee754_atan2+0x144>
 8008372:	4b32      	ldr	r3, [pc, #200]	; (800843c <__ieee754_atan2+0x17c>)
 8008374:	e7f6      	b.n	8008364 <__ieee754_atan2+0xa4>
 8008376:	4573      	cmp	r3, lr
 8008378:	d0e4      	beq.n	8008344 <__ieee754_atan2+0x84>
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008380:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008384:	da1e      	bge.n	80083c4 <__ieee754_atan2+0x104>
 8008386:	2f00      	cmp	r7, #0
 8008388:	da01      	bge.n	800838e <__ieee754_atan2+0xce>
 800838a:	323c      	adds	r2, #60	; 0x3c
 800838c:	db1e      	blt.n	80083cc <__ieee754_atan2+0x10c>
 800838e:	4632      	mov	r2, r6
 8008390:	463b      	mov	r3, r7
 8008392:	f7f8 fa5b 	bl	800084c <__aeabi_ddiv>
 8008396:	ec41 0b10 	vmov	d0, r0, r1
 800839a:	f7ff ff55 	bl	8008248 <fabs>
 800839e:	f7ff fdb3 	bl	8007f08 <atan>
 80083a2:	ec51 0b10 	vmov	r0, r1, d0
 80083a6:	2c01      	cmp	r4, #1
 80083a8:	d013      	beq.n	80083d2 <__ieee754_atan2+0x112>
 80083aa:	2c02      	cmp	r4, #2
 80083ac:	d015      	beq.n	80083da <__ieee754_atan2+0x11a>
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d0a7      	beq.n	8008302 <__ieee754_atan2+0x42>
 80083b2:	a319      	add	r3, pc, #100	; (adr r3, 8008418 <__ieee754_atan2+0x158>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f7 ff66 	bl	8000288 <__aeabi_dsub>
 80083bc:	a318      	add	r3, pc, #96	; (adr r3, 8008420 <__ieee754_atan2+0x160>)
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	e014      	b.n	80083ee <__ieee754_atan2+0x12e>
 80083c4:	a118      	add	r1, pc, #96	; (adr r1, 8008428 <__ieee754_atan2+0x168>)
 80083c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ca:	e7ec      	b.n	80083a6 <__ieee754_atan2+0xe6>
 80083cc:	2000      	movs	r0, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	e7e9      	b.n	80083a6 <__ieee754_atan2+0xe6>
 80083d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083d6:	4619      	mov	r1, r3
 80083d8:	e793      	b.n	8008302 <__ieee754_atan2+0x42>
 80083da:	a30f      	add	r3, pc, #60	; (adr r3, 8008418 <__ieee754_atan2+0x158>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f7 ff52 	bl	8000288 <__aeabi_dsub>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	a10d      	add	r1, pc, #52	; (adr r1, 8008420 <__ieee754_atan2+0x160>)
 80083ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ee:	f7f7 ff4b 	bl	8000288 <__aeabi_dsub>
 80083f2:	e786      	b.n	8008302 <__ieee754_atan2+0x42>
 80083f4:	a10a      	add	r1, pc, #40	; (adr r1, 8008420 <__ieee754_atan2+0x160>)
 80083f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083fa:	e782      	b.n	8008302 <__ieee754_atan2+0x42>
 80083fc:	a10c      	add	r1, pc, #48	; (adr r1, 8008430 <__ieee754_atan2+0x170>)
 80083fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008402:	e77e      	b.n	8008302 <__ieee754_atan2+0x42>
 8008404:	2000      	movs	r0, #0
 8008406:	2100      	movs	r1, #0
 8008408:	e77b      	b.n	8008302 <__ieee754_atan2+0x42>
 800840a:	a107      	add	r1, pc, #28	; (adr r1, 8008428 <__ieee754_atan2+0x168>)
 800840c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008410:	e777      	b.n	8008302 <__ieee754_atan2+0x42>
 8008412:	bf00      	nop
 8008414:	f3af 8000 	nop.w
 8008418:	33145c07 	.word	0x33145c07
 800841c:	3ca1a626 	.word	0x3ca1a626
 8008420:	54442d18 	.word	0x54442d18
 8008424:	400921fb 	.word	0x400921fb
 8008428:	54442d18 	.word	0x54442d18
 800842c:	3ff921fb 	.word	0x3ff921fb
 8008430:	54442d18 	.word	0x54442d18
 8008434:	3fe921fb 	.word	0x3fe921fb
 8008438:	08008a08 	.word	0x08008a08
 800843c:	08008a20 	.word	0x08008a20
 8008440:	54442d18 	.word	0x54442d18
 8008444:	c00921fb 	.word	0xc00921fb
 8008448:	54442d18 	.word	0x54442d18
 800844c:	bff921fb 	.word	0xbff921fb
 8008450:	7ff00000 	.word	0x7ff00000

08008454 <__ieee754_sqrt>:
 8008454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008458:	ec55 4b10 	vmov	r4, r5, d0
 800845c:	4e55      	ldr	r6, [pc, #340]	; (80085b4 <__ieee754_sqrt+0x160>)
 800845e:	43ae      	bics	r6, r5
 8008460:	ee10 0a10 	vmov	r0, s0
 8008464:	ee10 3a10 	vmov	r3, s0
 8008468:	462a      	mov	r2, r5
 800846a:	4629      	mov	r1, r5
 800846c:	d110      	bne.n	8008490 <__ieee754_sqrt+0x3c>
 800846e:	ee10 2a10 	vmov	r2, s0
 8008472:	462b      	mov	r3, r5
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4620      	mov	r0, r4
 800847e:	4629      	mov	r1, r5
 8008480:	f7f7 ff04 	bl	800028c <__adddf3>
 8008484:	4604      	mov	r4, r0
 8008486:	460d      	mov	r5, r1
 8008488:	ec45 4b10 	vmov	d0, r4, r5
 800848c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008490:	2d00      	cmp	r5, #0
 8008492:	dc10      	bgt.n	80084b6 <__ieee754_sqrt+0x62>
 8008494:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008498:	4330      	orrs	r0, r6
 800849a:	d0f5      	beq.n	8008488 <__ieee754_sqrt+0x34>
 800849c:	b15d      	cbz	r5, 80084b6 <__ieee754_sqrt+0x62>
 800849e:	ee10 2a10 	vmov	r2, s0
 80084a2:	462b      	mov	r3, r5
 80084a4:	ee10 0a10 	vmov	r0, s0
 80084a8:	f7f7 feee 	bl	8000288 <__aeabi_dsub>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	f7f8 f9cc 	bl	800084c <__aeabi_ddiv>
 80084b4:	e7e6      	b.n	8008484 <__ieee754_sqrt+0x30>
 80084b6:	1512      	asrs	r2, r2, #20
 80084b8:	d074      	beq.n	80085a4 <__ieee754_sqrt+0x150>
 80084ba:	07d4      	lsls	r4, r2, #31
 80084bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80084c0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80084c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084c8:	bf5e      	ittt	pl
 80084ca:	0fda      	lsrpl	r2, r3, #31
 80084cc:	005b      	lslpl	r3, r3, #1
 80084ce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80084d2:	2400      	movs	r4, #0
 80084d4:	0fda      	lsrs	r2, r3, #31
 80084d6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80084da:	107f      	asrs	r7, r7, #1
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	2516      	movs	r5, #22
 80084e0:	4620      	mov	r0, r4
 80084e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80084e6:	1886      	adds	r6, r0, r2
 80084e8:	428e      	cmp	r6, r1
 80084ea:	bfde      	ittt	le
 80084ec:	1b89      	suble	r1, r1, r6
 80084ee:	18b0      	addle	r0, r6, r2
 80084f0:	18a4      	addle	r4, r4, r2
 80084f2:	0049      	lsls	r1, r1, #1
 80084f4:	3d01      	subs	r5, #1
 80084f6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80084fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80084fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008502:	d1f0      	bne.n	80084e6 <__ieee754_sqrt+0x92>
 8008504:	462a      	mov	r2, r5
 8008506:	f04f 0e20 	mov.w	lr, #32
 800850a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800850e:	4281      	cmp	r1, r0
 8008510:	eb06 0c05 	add.w	ip, r6, r5
 8008514:	dc02      	bgt.n	800851c <__ieee754_sqrt+0xc8>
 8008516:	d113      	bne.n	8008540 <__ieee754_sqrt+0xec>
 8008518:	459c      	cmp	ip, r3
 800851a:	d811      	bhi.n	8008540 <__ieee754_sqrt+0xec>
 800851c:	f1bc 0f00 	cmp.w	ip, #0
 8008520:	eb0c 0506 	add.w	r5, ip, r6
 8008524:	da43      	bge.n	80085ae <__ieee754_sqrt+0x15a>
 8008526:	2d00      	cmp	r5, #0
 8008528:	db41      	blt.n	80085ae <__ieee754_sqrt+0x15a>
 800852a:	f100 0801 	add.w	r8, r0, #1
 800852e:	1a09      	subs	r1, r1, r0
 8008530:	459c      	cmp	ip, r3
 8008532:	bf88      	it	hi
 8008534:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008538:	eba3 030c 	sub.w	r3, r3, ip
 800853c:	4432      	add	r2, r6
 800853e:	4640      	mov	r0, r8
 8008540:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008544:	f1be 0e01 	subs.w	lr, lr, #1
 8008548:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800854c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008550:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008554:	d1db      	bne.n	800850e <__ieee754_sqrt+0xba>
 8008556:	430b      	orrs	r3, r1
 8008558:	d006      	beq.n	8008568 <__ieee754_sqrt+0x114>
 800855a:	1c50      	adds	r0, r2, #1
 800855c:	bf13      	iteet	ne
 800855e:	3201      	addne	r2, #1
 8008560:	3401      	addeq	r4, #1
 8008562:	4672      	moveq	r2, lr
 8008564:	f022 0201 	bicne.w	r2, r2, #1
 8008568:	1063      	asrs	r3, r4, #1
 800856a:	0852      	lsrs	r2, r2, #1
 800856c:	07e1      	lsls	r1, r4, #31
 800856e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008572:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008576:	bf48      	it	mi
 8008578:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800857c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008580:	4614      	mov	r4, r2
 8008582:	e781      	b.n	8008488 <__ieee754_sqrt+0x34>
 8008584:	0ad9      	lsrs	r1, r3, #11
 8008586:	3815      	subs	r0, #21
 8008588:	055b      	lsls	r3, r3, #21
 800858a:	2900      	cmp	r1, #0
 800858c:	d0fa      	beq.n	8008584 <__ieee754_sqrt+0x130>
 800858e:	02cd      	lsls	r5, r1, #11
 8008590:	d50a      	bpl.n	80085a8 <__ieee754_sqrt+0x154>
 8008592:	f1c2 0420 	rsb	r4, r2, #32
 8008596:	fa23 f404 	lsr.w	r4, r3, r4
 800859a:	1e55      	subs	r5, r2, #1
 800859c:	4093      	lsls	r3, r2
 800859e:	4321      	orrs	r1, r4
 80085a0:	1b42      	subs	r2, r0, r5
 80085a2:	e78a      	b.n	80084ba <__ieee754_sqrt+0x66>
 80085a4:	4610      	mov	r0, r2
 80085a6:	e7f0      	b.n	800858a <__ieee754_sqrt+0x136>
 80085a8:	0049      	lsls	r1, r1, #1
 80085aa:	3201      	adds	r2, #1
 80085ac:	e7ef      	b.n	800858e <__ieee754_sqrt+0x13a>
 80085ae:	4680      	mov	r8, r0
 80085b0:	e7bd      	b.n	800852e <__ieee754_sqrt+0xda>
 80085b2:	bf00      	nop
 80085b4:	7ff00000 	.word	0x7ff00000

080085b8 <__ieee754_atan2f>:
 80085b8:	ee10 2a90 	vmov	r2, s1
 80085bc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80085c0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80085c4:	b510      	push	{r4, lr}
 80085c6:	eef0 7a40 	vmov.f32	s15, s0
 80085ca:	dc06      	bgt.n	80085da <__ieee754_atan2f+0x22>
 80085cc:	ee10 0a10 	vmov	r0, s0
 80085d0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80085d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80085d8:	dd04      	ble.n	80085e4 <__ieee754_atan2f+0x2c>
 80085da:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80085de:	eeb0 0a67 	vmov.f32	s0, s15
 80085e2:	bd10      	pop	{r4, pc}
 80085e4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80085e8:	d103      	bne.n	80085f2 <__ieee754_atan2f+0x3a>
 80085ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ee:	f000 b883 	b.w	80086f8 <atanf>
 80085f2:	1794      	asrs	r4, r2, #30
 80085f4:	f004 0402 	and.w	r4, r4, #2
 80085f8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80085fc:	b943      	cbnz	r3, 8008610 <__ieee754_atan2f+0x58>
 80085fe:	2c02      	cmp	r4, #2
 8008600:	d05e      	beq.n	80086c0 <__ieee754_atan2f+0x108>
 8008602:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80086d4 <__ieee754_atan2f+0x11c>
 8008606:	2c03      	cmp	r4, #3
 8008608:	bf08      	it	eq
 800860a:	eef0 7a47 	vmoveq.f32	s15, s14
 800860e:	e7e6      	b.n	80085de <__ieee754_atan2f+0x26>
 8008610:	b941      	cbnz	r1, 8008624 <__ieee754_atan2f+0x6c>
 8008612:	eddf 7a31 	vldr	s15, [pc, #196]	; 80086d8 <__ieee754_atan2f+0x120>
 8008616:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80086dc <__ieee754_atan2f+0x124>
 800861a:	2800      	cmp	r0, #0
 800861c:	bfb8      	it	lt
 800861e:	eef0 7a40 	vmovlt.f32	s15, s0
 8008622:	e7dc      	b.n	80085de <__ieee754_atan2f+0x26>
 8008624:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008628:	d110      	bne.n	800864c <__ieee754_atan2f+0x94>
 800862a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800862e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008632:	d107      	bne.n	8008644 <__ieee754_atan2f+0x8c>
 8008634:	2c02      	cmp	r4, #2
 8008636:	d846      	bhi.n	80086c6 <__ieee754_atan2f+0x10e>
 8008638:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <__ieee754_atan2f+0x128>)
 800863a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800863e:	edd4 7a00 	vldr	s15, [r4]
 8008642:	e7cc      	b.n	80085de <__ieee754_atan2f+0x26>
 8008644:	2c02      	cmp	r4, #2
 8008646:	d841      	bhi.n	80086cc <__ieee754_atan2f+0x114>
 8008648:	4b26      	ldr	r3, [pc, #152]	; (80086e4 <__ieee754_atan2f+0x12c>)
 800864a:	e7f6      	b.n	800863a <__ieee754_atan2f+0x82>
 800864c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008650:	d0df      	beq.n	8008612 <__ieee754_atan2f+0x5a>
 8008652:	1a5b      	subs	r3, r3, r1
 8008654:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008658:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800865c:	da1a      	bge.n	8008694 <__ieee754_atan2f+0xdc>
 800865e:	2a00      	cmp	r2, #0
 8008660:	da01      	bge.n	8008666 <__ieee754_atan2f+0xae>
 8008662:	313c      	adds	r1, #60	; 0x3c
 8008664:	db19      	blt.n	800869a <__ieee754_atan2f+0xe2>
 8008666:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800866a:	f000 f919 	bl	80088a0 <fabsf>
 800866e:	f000 f843 	bl	80086f8 <atanf>
 8008672:	eef0 7a40 	vmov.f32	s15, s0
 8008676:	2c01      	cmp	r4, #1
 8008678:	d012      	beq.n	80086a0 <__ieee754_atan2f+0xe8>
 800867a:	2c02      	cmp	r4, #2
 800867c:	d017      	beq.n	80086ae <__ieee754_atan2f+0xf6>
 800867e:	2c00      	cmp	r4, #0
 8008680:	d0ad      	beq.n	80085de <__ieee754_atan2f+0x26>
 8008682:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80086e8 <__ieee754_atan2f+0x130>
 8008686:	ee77 7a80 	vadd.f32	s15, s15, s0
 800868a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80086ec <__ieee754_atan2f+0x134>
 800868e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008692:	e7a4      	b.n	80085de <__ieee754_atan2f+0x26>
 8008694:	eddf 7a10 	vldr	s15, [pc, #64]	; 80086d8 <__ieee754_atan2f+0x120>
 8008698:	e7ed      	b.n	8008676 <__ieee754_atan2f+0xbe>
 800869a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80086f0 <__ieee754_atan2f+0x138>
 800869e:	e7ea      	b.n	8008676 <__ieee754_atan2f+0xbe>
 80086a0:	ee17 3a90 	vmov	r3, s15
 80086a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80086a8:	ee07 3a90 	vmov	s15, r3
 80086ac:	e797      	b.n	80085de <__ieee754_atan2f+0x26>
 80086ae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80086e8 <__ieee754_atan2f+0x130>
 80086b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086b6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80086ec <__ieee754_atan2f+0x134>
 80086ba:	ee70 7a67 	vsub.f32	s15, s0, s15
 80086be:	e78e      	b.n	80085de <__ieee754_atan2f+0x26>
 80086c0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80086ec <__ieee754_atan2f+0x134>
 80086c4:	e78b      	b.n	80085de <__ieee754_atan2f+0x26>
 80086c6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80086f4 <__ieee754_atan2f+0x13c>
 80086ca:	e788      	b.n	80085de <__ieee754_atan2f+0x26>
 80086cc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80086f0 <__ieee754_atan2f+0x138>
 80086d0:	e785      	b.n	80085de <__ieee754_atan2f+0x26>
 80086d2:	bf00      	nop
 80086d4:	c0490fdb 	.word	0xc0490fdb
 80086d8:	3fc90fdb 	.word	0x3fc90fdb
 80086dc:	bfc90fdb 	.word	0xbfc90fdb
 80086e0:	08008a38 	.word	0x08008a38
 80086e4:	08008a44 	.word	0x08008a44
 80086e8:	33bbbd2e 	.word	0x33bbbd2e
 80086ec:	40490fdb 	.word	0x40490fdb
 80086f0:	00000000 	.word	0x00000000
 80086f4:	3f490fdb 	.word	0x3f490fdb

080086f8 <atanf>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	ee10 5a10 	vmov	r5, s0
 80086fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008702:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008706:	eef0 7a40 	vmov.f32	s15, s0
 800870a:	db10      	blt.n	800872e <atanf+0x36>
 800870c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008710:	dd04      	ble.n	800871c <atanf+0x24>
 8008712:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008716:	eeb0 0a67 	vmov.f32	s0, s15
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008854 <atanf+0x15c>
 8008720:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008858 <atanf+0x160>
 8008724:	2d00      	cmp	r5, #0
 8008726:	bfd8      	it	le
 8008728:	eef0 7a40 	vmovle.f32	s15, s0
 800872c:	e7f3      	b.n	8008716 <atanf+0x1e>
 800872e:	4b4b      	ldr	r3, [pc, #300]	; (800885c <atanf+0x164>)
 8008730:	429c      	cmp	r4, r3
 8008732:	dc10      	bgt.n	8008756 <atanf+0x5e>
 8008734:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008738:	da0a      	bge.n	8008750 <atanf+0x58>
 800873a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008860 <atanf+0x168>
 800873e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008746:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800874a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874e:	dce2      	bgt.n	8008716 <atanf+0x1e>
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	e013      	b.n	800877e <atanf+0x86>
 8008756:	f000 f8a3 	bl	80088a0 <fabsf>
 800875a:	4b42      	ldr	r3, [pc, #264]	; (8008864 <atanf+0x16c>)
 800875c:	429c      	cmp	r4, r3
 800875e:	dc4f      	bgt.n	8008800 <atanf+0x108>
 8008760:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008764:	429c      	cmp	r4, r3
 8008766:	dc41      	bgt.n	80087ec <atanf+0xf4>
 8008768:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800876c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008770:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008774:	2300      	movs	r3, #0
 8008776:	ee30 0a27 	vadd.f32	s0, s0, s15
 800877a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008784:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008868 <atanf+0x170>
 8008788:	eddf 5a38 	vldr	s11, [pc, #224]	; 800886c <atanf+0x174>
 800878c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008870 <atanf+0x178>
 8008790:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008794:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008798:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008874 <atanf+0x17c>
 800879c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80087a0:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008878 <atanf+0x180>
 80087a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80087a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800887c <atanf+0x184>
 80087ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80087b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008880 <atanf+0x188>
 80087b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80087b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008884 <atanf+0x18c>
 80087bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80087c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008888 <atanf+0x190>
 80087c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80087c8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800888c <atanf+0x194>
 80087cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80087d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008890 <atanf+0x198>
 80087d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80087d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80087dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80087e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80087e4:	d121      	bne.n	800882a <atanf+0x132>
 80087e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087ea:	e794      	b.n	8008716 <atanf+0x1e>
 80087ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80087f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80087f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80087f8:	2301      	movs	r3, #1
 80087fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80087fe:	e7be      	b.n	800877e <atanf+0x86>
 8008800:	4b24      	ldr	r3, [pc, #144]	; (8008894 <atanf+0x19c>)
 8008802:	429c      	cmp	r4, r3
 8008804:	dc0b      	bgt.n	800881e <atanf+0x126>
 8008806:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800880a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800880e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008812:	2302      	movs	r3, #2
 8008814:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881c:	e7af      	b.n	800877e <atanf+0x86>
 800881e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008822:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008826:	2303      	movs	r3, #3
 8008828:	e7a9      	b.n	800877e <atanf+0x86>
 800882a:	4a1b      	ldr	r2, [pc, #108]	; (8008898 <atanf+0x1a0>)
 800882c:	491b      	ldr	r1, [pc, #108]	; (800889c <atanf+0x1a4>)
 800882e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008832:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008836:	ed93 0a00 	vldr	s0, [r3]
 800883a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800883e:	ed92 0a00 	vldr	s0, [r2]
 8008842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008846:	2d00      	cmp	r5, #0
 8008848:	ee70 7a67 	vsub.f32	s15, s0, s15
 800884c:	bfb8      	it	lt
 800884e:	eef1 7a67 	vneglt.f32	s15, s15
 8008852:	e760      	b.n	8008716 <atanf+0x1e>
 8008854:	3fc90fdb 	.word	0x3fc90fdb
 8008858:	bfc90fdb 	.word	0xbfc90fdb
 800885c:	3edfffff 	.word	0x3edfffff
 8008860:	7149f2ca 	.word	0x7149f2ca
 8008864:	3f97ffff 	.word	0x3f97ffff
 8008868:	3c8569d7 	.word	0x3c8569d7
 800886c:	3d4bda59 	.word	0x3d4bda59
 8008870:	bd6ef16b 	.word	0xbd6ef16b
 8008874:	3d886b35 	.word	0x3d886b35
 8008878:	3dba2e6e 	.word	0x3dba2e6e
 800887c:	3e124925 	.word	0x3e124925
 8008880:	3eaaaaab 	.word	0x3eaaaaab
 8008884:	bd15a221 	.word	0xbd15a221
 8008888:	bd9d8795 	.word	0xbd9d8795
 800888c:	bde38e38 	.word	0xbde38e38
 8008890:	be4ccccd 	.word	0xbe4ccccd
 8008894:	401bffff 	.word	0x401bffff
 8008898:	08008a50 	.word	0x08008a50
 800889c:	08008a60 	.word	0x08008a60

080088a0 <fabsf>:
 80088a0:	ee10 3a10 	vmov	r3, s0
 80088a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a8:	ee00 3a10 	vmov	s0, r3
 80088ac:	4770      	bx	lr
	...

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr
